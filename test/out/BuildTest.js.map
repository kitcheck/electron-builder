{
  "version": 3,
  "file": "BuildTest.js",
  "sourceRoot": "",
  "sources": [
    "../src/BuildTest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import test from \"./helpers/avaEx\"\nimport {\n  assertPack, modifyPackageJson, platform, getPossiblePlatforms, currentPlatform,\n  app, appThrows, packageJson\n} from \"./helpers/packTester\"\nimport { move, outputJson } from \"fs-extra-p\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { archFromString, BuildOptions, Platform, Arch, PackagerOptions, DIR_TARGET, createTargets } from \"out\"\nimport { normalizeOptions } from \"out/builder\"\nimport { createYargs } from \"out/cliOptions\"\nimport { extractFile } from \"asar-electron-builder\"\nimport { ELECTRON_VERSION } from \"./helpers/config\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"out/util/awaiter\")\n\ntest(\"cli\", () => {\n  const yargs = createYargs()\n\n  function expected(opt: BuildOptions): any {\n    return Object.assign({\n      publish: undefined,\n      draft: undefined,\n      prerelease: undefined,\n      extraMetadata: undefined,\n    }, opt)\n  }\n\n  function parse(input: string): BuildOptions {\n    return normalizeOptions(yargs.parse(input.split(\" \")))\n  }\n\n  assertThat(parse(\"--platform osx\")).isEqualTo(expected({targets: Platform.MAC.createTarget()}))\n  assertThat(parse(\"--platform mac\")).isEqualTo(expected({targets: Platform.MAC.createTarget()}))\n\n  const all = expected({targets: new Map([...Platform.MAC.createTarget(null, Arch.x64), ...Platform.WINDOWS.createTarget(null, Arch.x64, Arch.ia32), ...Platform.LINUX.createTarget(null, Arch.x64, Arch.ia32)])})\n  assertThat(parse(\"-owl --x64 --ia32\")).isEqualTo(all)\n  assertThat(parse(\"-mwl --x64 --ia32\")).isEqualTo(all)\n\n  assertThat(parse(\"--dir\")).isEqualTo(expected({targets: Platform.current().createTarget(DIR_TARGET)}))\n  assertThat(parse(\"--mac --dir\")).isEqualTo(expected({targets: Platform.MAC.createTarget(DIR_TARGET)}))\n  assertThat(parse(\"--ia32 --dir\")).isEqualTo(expected({targets: Platform.current().createTarget(DIR_TARGET, Arch.ia32)}))\n  assertThat(parse(\"--platform linux --dir\")).isEqualTo(expected({targets: Platform.LINUX.createTarget(DIR_TARGET)}))\n\n  assertThat(parse(\"--osx\")).isEqualTo(expected({targets: Platform.MAC.createTarget()}))\n  assertThat(parse(\"--arch x64\")).isEqualTo(expected({targets: Platform.current().createTarget(null, Arch.x64)}))\n  assertThat(parse(\"--ia32 --x64\")).isEqualTo(expected({targets: Platform.current().createTarget(null, Arch.x64, Arch.ia32)}))\n  assertThat(parse(\"--linux\")).isEqualTo(expected({targets: Platform.LINUX.createTarget()}))\n  assertThat(parse(\"--win\")).isEqualTo(expected({targets: Platform.WINDOWS.createTarget()}))\n  assertThat(parse(\"-owl\")).isEqualTo(expected({targets: createTargets([Platform.MAC, Platform.WINDOWS, Platform.LINUX])}))\n  assertThat(parse(\"-l tar.gz:ia32\")).isEqualTo(expected({targets: Platform.LINUX.createTarget(\"tar.gz\", Arch.ia32)}))\n  assertThat(parse(\"-l tar.gz:x64\")).isEqualTo(expected({targets: Platform.LINUX.createTarget(\"tar.gz\", Arch.x64)}))\n  assertThat(parse(\"-l tar.gz\")).isEqualTo(expected({targets: Platform.LINUX.createTarget(\"tar.gz\", archFromString(process.arch))}))\n  assertThat(parse(\"-w tar.gz:x64\")).isEqualTo(expected({targets: Platform.WINDOWS.createTarget(\"tar.gz\", Arch.x64)}))\n\n  function parseExtraMetadata(input: string) {\n    const result = parse(input)\n    delete result.targets\n    return result\n  }\n  assertThat(parseExtraMetadata(\"--em.foo=bar\")).isEqualTo(expected({extraMetadata: {\n    foo: \"bar\",\n  }}))\n})\n\n// only dir - avoid DMG\ntest(\"custom buildResources dir\", app(allPlatforms(false), {\n  projectDirCreated: projectDir => BluebirdPromise.all([\n    modifyPackageJson(projectDir, data => {\n      data.directories = {\n        buildResources: \"custom\"\n      }\n    }),\n    move(path.join(projectDir, \"build\"), path.join(projectDir, \"custom\"))\n  ])\n}))\n\ntest(\"custom output dir\", app(allPlatforms(false), {\n  projectDirCreated: packageJson(it => {\n    it.directories = {\n      output: \"customDist\",\n      // https://github.com/electron-userland/electron-builder/issues/601\n      app: \".\",\n    }\n  }),\n  packed: async context => {\n    await assertThat(path.join(context.projectDir, \"customDist\")).isDirectory()\n  }\n}))\n\ntest(\"build in the app package.json\", t => t.throws(assertPack(\"test-app\", allPlatforms(), {\n  projectDirCreated: it => modifyPackageJson(it, data => {\n    data.build = {\n      \"iconUrl\": \"bar\",\n    }\n  }, true)\n}), /'build' in the application package\\.json .+/))\n\ntest(\"name in the build\", appThrows(/'name' in the 'build' is forbidden/, currentPlatform(), {projectDirCreated: packageJson(it => it.build = {\"name\": \"Cool App\"})}))\n\n// this test also test appMetadata, so, we must use test-app here\ntest(\"empty description\", t => t.throws(assertPack(\"test-app\", {\n  targets: Platform.LINUX.createTarget(),\n  appMetadata: <any>{\n    description: \"\",\n  }\n}), /Please specify 'description'/))\n\ntest(\"invalid main in the app package.json\", t => t.throws(assertPack(\"test-app\", allPlatforms(false), {\n  projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n    data.main = \"main.js\"\n  }, true)\n}), /Application entry file \"main.js\" in the /))\n\ntest(\"invalid main in the app package.json (no asar)\", t => t.throws(assertPack(\"test-app\", allPlatforms(false), {\n  projectDirCreated: projectDir => {\n    return BluebirdPromise.all([\n      modifyPackageJson(projectDir, data => {\n        data.main = \"main.js\"\n      }, true),\n      modifyPackageJson(projectDir, data => {\n        data.build.asar = false\n      })\n    ])\n  }\n}), `Application entry file \"main.js\" does not exist. Seems like a wrong configuration.`))\n\ntest(\"invalid main in the app package.json (custom asar)\", t => t.throws(assertPack(\"test-app\", allPlatforms(false), {\n  projectDirCreated: projectDir => {\n    return BluebirdPromise.all([\n      modifyPackageJson(projectDir, data => {\n        data.main = \"path/app.asar/main.js\"\n      }, true),\n      modifyPackageJson(projectDir, data => {\n        data.build.asar = false\n      })\n    ])\n  }\n}), /Application entry file \"main.js\" in the (\"[^\"]*\") does not exist\\. Seems like a wrong configuration\\./))\n\ntest(\"main in the app package.json (no asar)\", () => assertPack(\"test-app\", allPlatforms(false), {\n  projectDirCreated: projectDir => {\n    return BluebirdPromise.all([\n      move(path.join(projectDir, \"app\", \"index.js\"), path.join(projectDir, \"app\", \"main.js\")),\n      modifyPackageJson(projectDir, data => {\n        data.main = \"main.js\"\n      }, true),\n      modifyPackageJson(projectDir, data => {\n        data.build.asar = false\n      })\n    ])\n  }\n}))\n\ntest(\"main in the app package.json (custom asar)\", () => assertPack(\"test-app\", allPlatforms(false), {\n  projectDirCreated: projectDir => {\n    return BluebirdPromise.all([\n      modifyPackageJson(projectDir, data => {\n        data.main = \"path/app.asar/index.js\"\n      }, true),\n      modifyPackageJson(projectDir, data => {\n        data.build.asar = false\n      })\n    ])\n  }\n}))\n\ntest(\"relative index\", () => assertPack(\"test-app\", allPlatforms(false), {\n  projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n    data.main = \"./index.js\"\n  }, true)\n}))\n\ntest.ifDevOrLinuxCi(\"electron version from electron-prebuilt dependency\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n}, {\n  projectDirCreated: projectDir => BluebirdPromise.all([\n    outputJson(path.join(projectDir, \"node_modules\", \"electron-prebuilt\", \"package.json\"), {\n      version: ELECTRON_VERSION\n    }),\n    modifyPackageJson(projectDir, data => {\n      delete data.build.electronVersion\n      data.devDependencies = {}\n    })\n  ])\n}))\n\ntest.ifDevOrLinuxCi(\"electron version from electron dependency\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n}, {\n  projectDirCreated: projectDir => BluebirdPromise.all([\n    outputJson(path.join(projectDir, \"node_modules\", \"electron\", \"package.json\"), {\n      version: ELECTRON_VERSION\n    }),\n    modifyPackageJson(projectDir, data => {\n      delete data.build.electronVersion\n      data.devDependencies = {}\n    })\n  ])\n}))\n\ntest.ifDevOrLinuxCi(\"electron version from build\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n}, {\n  projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n    data.devDependencies = {}\n    data.build.electronVersion = ELECTRON_VERSION\n  })\n}))\n\ntest(\"www as default dir\", () => assertPack(\"test-app\", currentPlatform(), {\n  projectDirCreated: projectDir => move(path.join(projectDir, \"app\"), path.join(projectDir, \"www\"))\n}))\n\ntest(\"afterPack\", t => {\n  const targets = process.env.CI ? Platform.fromString(process.platform).createTarget(DIR_TARGET) : getPossiblePlatforms(DIR_TARGET)\n  let called = 0\n  return assertPack(\"test-app-one\", {\n    targets: targets,\n    devMetadata: {\n      build: {\n        afterPack: () => {\n          called++\n          return BluebirdPromise.resolve()\n        }\n      }\n    }\n  }, {\n    packed: () => {\n      t.is(called, targets.size)\n      return BluebirdPromise.resolve()\n    }\n  })\n})\n\ntest.ifDevOrLinuxCi(\"extra metadata\", () => {\n  const extraMetadata = {\n    foo: {\n      bar: 12,\n    },\n    productName: \"NewName\"\n  }\n  return assertPack(\"test-app-one\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n    extraMetadata: extraMetadata,\n  }, {\n    projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n      data.foo = {\n        bar: 42,\n        existingProp: 22,\n      }\n    }),\n    packed: async context => {\n      await assertThat(path.join(context.getContent(Platform.LINUX), \"NewName\")).isFile()\n      assertThat(JSON.parse(extractFile(path.join(context.getResources(Platform.LINUX), \"app.asar\"), \"package.json\").toString())).hasProperties({\n        foo: {\n          bar: 12,\n          existingProp: 22,\n        }\n      })\n    }\n  })\n})\n\ntest.ifDevOrLinuxCi(\"extra metadata - two\", () => {\n  const extraMetadata = {\n    productName: \"NewName\"\n  }\n  return assertPack(\"test-app\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n    extraMetadata: extraMetadata,\n  }, {\n    packed: async context => {\n      await assertThat(path.join(context.getContent(Platform.LINUX), \"NewName\")).isFile()\n    }\n  })\n})\n\ntest.ifOsx(\"extra metadata - override icon\", t => t.throws((() => {\n  const extraMetadata = {\n    build: {\n      mac: {\n        icon: \"dev\"\n      }\n    },\n  }\n  return assertPack(\"test-app\", {\n    targets: Platform.OSX.createTarget(DIR_TARGET),\n    extraMetadata: extraMetadata,\n  }, {\n    packed: async context => {\n      await assertThat(path.join(context.getContent(Platform.LINUX), \"NewName\")).isFile()\n    }\n  })\n})(), /ENOENT: no such file or directory/))\n\n// test.ifOsx(\"app-executable-deps\", () => {\n//   return assertPack(\"app-executable-deps\", {\n//     targets: Platform.current().createTarget(DIR_TARGET),\n//   }, {\n//     useTempDir: false,\n//     packed: async context => {\n//       const data = await readJson(path.join(context.outDir, \"mac/app-executable-deps.app/Contents/Resources/app.asar.unpacked\", \"node_modules\", \"node-notifier\", \"package.json\"))\n//       for (let name of Object.getOwnPropertyNames(data)) {\n//         if (name[0] === \"_\") {\n//           throw new Error(\"Property name starts with _\")\n//         }\n//       }\n//     }\n//   })\n// })\n\ntest.ifDevOrLinuxCi(\"smart unpack\", () => {\n  return assertPack(\"test-app-one\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n  }, {\n    npmInstallBefore: true,\n    projectDirCreated: packageJson(it => {\n      it.dependencies = {\n        \"debug\": \"^2.2.0\",\n        \"edge-cs\": \"^1.0.0\"\n      }\n    }),\n    packed: context => {\n      assertThat(JSON.parse(extractFile(path.join(context.getResources(Platform.LINUX), \"app.asar\"), \"node_modules/debug/package.json\").toString())).hasProperties({\n        name: \"debug\"\n      })\n      return BluebirdPromise.resolve()\n    }\n  })\n})\n\ntest.ifWinCi(\"Build MacOS on Windows is not supported\", appThrows(/Build for MacOS is supported only on MacOS.+/, platform(Platform.MAC)))\n\nfunction allPlatforms(dist: boolean = true): PackagerOptions {\n  return {\n    targets: getPossiblePlatforms(dist ? null : DIR_TARGET),\n  }\n}"
  ]
}
