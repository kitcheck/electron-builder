{
  "version": 3,
  "file": "nsisTest.js",
  "sourceRoot": "",
  "sources": [
    "../src/nsisTest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Platform, Arch } from \"out\"\nimport test from \"./helpers/avaEx\"\nimport { assertPack, getTestAsset, app } from \"./helpers/packTester\"\nimport { copy, outputFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { extractFile } from \"asar-electron-builder\"\nimport { walk } from \"out/asarUtil\"\nimport { nsisPerMachineInstall } from \"./helpers/expectedContents\"\nimport { WineManager, diff } from \"./helpers/wine\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"out/util/awaiter\")\n\nconst nsisTarget = Platform.WINDOWS.createTarget([\"nsis\"])\n\ntest(\"one-click\", app({\n  targets: Platform.WINDOWS.createTarget([\"nsis\"], Arch.ia32),\n  devMetadata: {\n    build: {\n      // wine creates incorrect filenames and registry entries for unicode, so, we use ASCII\n      // productName: \"TestApp\",\n    }\n  }\n}, {\n  useTempDir: true,\n  signed: true,\n  packed: context => {\n    return doTest(context.outDir, true)\n  }\n}))\n\ntest.ifDevOrLinuxCi(\"perMachine, no run after finish\", app({\n  targets: Platform.WINDOWS.createTarget([\"nsis\"], Arch.ia32),\n  devMetadata: {\n    build: {\n      // wine creates incorrect filenames and registry entries for unicode, so, we use ASCII\n      productName: \"TestApp\",\n      fileAssociations: [\n        {\n          ext: \"foo\",\n          name: \"Test Foo\",\n        }\n      ],\n      nsis: {\n        perMachine: true,\n        runAfterFinish: false,\n      },\n    }\n  },\n}, {\n  projectDirCreated: projectDir => {\n    let headerIconPath = path.join(projectDir, \"build\", \"foo.ico\")\n    return copy(getTestAsset(\"headerIcon.ico\"), headerIconPath)\n  },\n  packed: context => {\n    return doTest(context.outDir, false)\n  },\n}))\n\nasync function doTest(outDir: string, perUser: boolean) {\n  if (process.env.DO_WINE !== \"true\") {\n    return BluebirdPromise.resolve()\n  }\n\n  const wine = new WineManager()\n  await wine.prepare()\n  const driveC = path.join(wine.wineDir, \"drive_c\")\n  const driveCWindows = path.join(wine.wineDir, \"drive_c\", \"windows\")\n  const perUserTempDir = path.join(wine.userDir, \"Temp\")\n  const walkFilter = (it: string) => {\n    return it !== driveCWindows && it !== perUserTempDir\n  }\n\n  function listFiles() {\n    return walk(driveC, null, walkFilter)\n  }\n\n  let fsBefore = await listFiles()\n\n  await wine.exec(path.join(outDir, \"TestApp Setup 1.1.0.exe\"), \"/S\")\n\n  const instDir = perUser ? path.join(wine.userDir, \"Local Settings\", \"Application Data\", \"Programs\") : path.join(driveC, \"Program Files\")\n  const appAsar = path.join(instDir, \"TestApp\", \"1.1.0\", \"resources\", \"app.asar\")\n  assertThat(JSON.parse(extractFile(appAsar, \"package.json\").toString())).hasProperties({\n    name: \"TestApp\"\n  })\n\n  let fsAfter = await listFiles()\n\n  let fsChanges = diff(fsBefore, fsAfter, driveC)\n  assertThat(fsChanges.added).isEqualTo(nsisPerMachineInstall)\n  assertThat(fsChanges.deleted).isEqualTo([])\n\n  // run installer again to test uninstall\n  const appDataFile = path.join(wine.userDir, \"Application Data\", \"TestApp\", \"doNotDeleteMe\")\n  await outputFile(appDataFile, \"app data must be not removed\")\n  fsBefore = await listFiles()\n  await wine.exec(path.join(outDir, \"TestApp Setup 1.1.0.exe\"), \"/S\")\n  fsAfter = await listFiles()\n\n  fsChanges = diff(fsBefore, fsAfter, driveC)\n  assertThat(fsChanges.added).isEqualTo([])\n  assertThat(fsChanges.deleted).isEqualTo([])\n\n  await assertThat(appDataFile).isFile()\n\n  await wine.exec(path.join(outDir, \"TestApp Setup 1.1.0.exe\"), \"/S\", \"--delete-app-data\")\n  await assertThat(appDataFile).doesNotExist()\n}\n\ntest.ifNotCiOsx(\"boring\", app({\n  targets: nsisTarget,\n  devMetadata: {\n    build: {\n      nsis: {\n        oneClick: false,\n        language: \"1031\",\n      },\n      win: {\n        legalTrademarks: \"My Trademark\"\n      },\n    }\n  }\n}, {signed: true}))\n\ntest.ifNotCiOsx(\"boring, only perMachine\", app({\n  targets: nsisTarget,\n  devMetadata: {\n    build: {\n      nsis: {\n        oneClick: false,\n        perMachine: true,\n      }\n    }\n  }\n}))\n\ntest.ifNotCiOsx(\"installerHeaderIcon\", () => {\n  let headerIconPath: string | null = null\n  return assertPack(\"test-app-one\", {\n      targets: nsisTarget,\n      effectiveOptionComputed: options => {\n        const defines = options[0]\n        assertThat(defines.HEADER_ICO).isEqualTo(headerIconPath)\n        return false\n      }\n    }, {\n      projectDirCreated: projectDir => {\n        headerIconPath = path.join(projectDir, \"build\", \"installerHeaderIcon.ico\")\n        return copy(getTestAsset(\"headerIcon.ico\"), headerIconPath)\n      }\n    }\n  )\n})\n\ntest.ifNotCiOsx(\"boring, MUI_HEADER\", () => {\n  let installerHeaderPath: string | null = null\n  return assertPack(\"test-app-one\", {\n      targets: nsisTarget,\n      devMetadata: {\n        build: {\n          nsis: {\n            oneClick: false,\n          }\n        }\n      },\n      effectiveOptionComputed: options => {\n        const defines = options[0]\n        assertThat(defines.MUI_HEADERIMAGE).isEqualTo(null)\n        assertThat(defines.MUI_HEADERIMAGE_BITMAP).isEqualTo(installerHeaderPath)\n        assertThat(defines.MUI_HEADERIMAGE_RIGHT).isEqualTo(null)\n        // speedup, do not build - another MUI_HEADER test will test build\n        return true\n      }\n    }, {\n      projectDirCreated: projectDir => {\n        installerHeaderPath = path.join(projectDir, \"build\", \"installerHeader.bmp\")\n        return copy(getTestAsset(\"installerHeader.bmp\"), installerHeaderPath)\n      }\n    }\n  )\n})\n\ntest.ifNotCiOsx(\"boring, MUI_HEADER as option\", () => {\n  let installerHeaderPath: string | null = null\n  return assertPack(\"test-app-one\", {\n      targets: Platform.WINDOWS.createTarget([\"nsis\"], Arch.ia32, Arch.x64),\n      devMetadata: {\n        build: {\n          nsis: {\n            oneClick: false,\n            installerHeader: \"foo.bmp\"\n          }\n        }\n      },\n      effectiveOptionComputed: options => {\n        const defines = options[0]\n        assertThat(defines.MUI_HEADERIMAGE).isEqualTo(null)\n        assertThat(defines.MUI_HEADERIMAGE_BITMAP).isEqualTo(installerHeaderPath)\n        assertThat(defines.MUI_HEADERIMAGE_RIGHT).isEqualTo(null)\n        // test that we can build such installer\n        return false\n      }\n    }, {\n      projectDirCreated: projectDir => {\n        installerHeaderPath = path.join(projectDir, \"foo.bmp\")\n        return copy(getTestAsset(\"installerHeader.bmp\"), installerHeaderPath)\n      },\n    }\n  )\n})\n\ntest.ifDevOrLinuxCi(\"custom include\", () => assertPack(\"test-app-one\", {targets: nsisTarget}, {\n  projectDirCreated: projectDir => copy(getTestAsset(\"installer.nsh\"), path.join(projectDir, \"build\", \"installer.nsh\")),\n  packed: context => BluebirdPromise.all([\n    assertThat(path.join(context.projectDir, \"build\", \"customHeader\")).isFile(),\n    assertThat(path.join(context.projectDir, \"build\", \"customInit\")).isFile(),\n    assertThat(path.join(context.projectDir, \"build\", \"customInstall\")).isFile(),\n  ]),\n}))\n\ntest.ifDevOrLinuxCi(\"custom script\", app({targets: nsisTarget}, {\n  projectDirCreated: projectDir => copy(getTestAsset(\"installer.nsi\"), path.join(projectDir, \"build\", \"installer.nsi\")),\n  packed: context => assertThat(path.join(context.projectDir, \"build\", \"customInstallerScript\")).isFile(),\n}))"
  ]
}
