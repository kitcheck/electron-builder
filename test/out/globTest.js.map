{
  "version": 3,
  "file": "globTest.js",
  "sourceRoot": "",
  "sources": [
    "../src/globTest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import test from \"./helpers/avaEx\"\nimport { expectedWinContents } from \"./helpers/expectedContents\"\nimport { outputFile, symlink } from \"fs-extra-p\"\nimport { assertPack, modifyPackageJson, getPossiblePlatforms, app, appThrows } from \"./helpers/packTester\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { Platform, DIR_TARGET } from \"out\"\nimport pathSorter = require(\"path-sort\")\nimport { statFile } from \"asar-electron-builder\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"out/util/awaiter\")\n\ntest.ifDevOrLinuxCi(\"ignore build resources\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n  devMetadata: {\n    build: {\n      asar: false\n    }\n  }\n}, {\n  projectDirCreated: projectDir => {\n    return outputFile(path.join(projectDir, \"one/build/foo.txt\"), \"data\")\n  },\n  packed: context => {\n    return assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \"one\", \"build\", \"foo.txt\")).isFile()\n  },\n}))\n\ntest.ifDevOrLinuxCi(\"ignore known ignored files\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n  devMetadata: {\n    build: {\n      asar: false\n    }\n  }\n}, {\n  projectDirCreated: projectDir => BluebirdPromise.all([\n    outputFile(path.join(projectDir, \".svn\", \"foo\"), \"data\"),\n    outputFile(path.join(projectDir, \".git\", \"foo\"), \"data\"),\n    outputFile(path.join(projectDir, \"foo\", \"bar\", \"f.o\"), \"data\"),\n    outputFile(path.join(projectDir, \"node_modules\", \".bin\", \"f.txt\"), \"data\"),\n    outputFile(path.join(projectDir, \"node_modules\", \".bin2\", \"f.txt\"), \"data\"),\n  ]),\n  packed: async context => {\n    await assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \".svn\")).doesNotExist()\n    await assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \".git\")).doesNotExist()\n    await assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \"foo\", \"bar\", \"f.o\")).doesNotExist()\n    await assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \"node_modules\", \".bin\")).doesNotExist()\n    await assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \"node_modules\", \".bin2\")).isDirectory()\n  },\n}))\n\ntest.ifDevOrLinuxCi(\"files\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n  devMetadata: {\n    build: {\n      asar: false,\n      files: [\"**/*\", \"!ignoreMe${/*}\"]\n    }\n  }\n}, {\n  projectDirCreated: projectDir => {\n    return outputFile(path.join(projectDir, \"ignoreMe\", \"foo\"), \"data\")\n  },\n  packed: context => {\n    return assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \"ignoreMe\")).doesNotExist()\n  },\n}))\n\ntest.ifDevOrLinuxCi(\"unpackDir one\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n  devMetadata: {\n    build: {\n      asar: {\n        unpackDir: \"{assets,b2}\"\n      },\n    }\n  }\n}, {\n  projectDirCreated: projectDir => {\n    return BluebirdPromise.all([\n      outputFile(path.join(projectDir, \"assets\", \"file\"), \"data\"),\n      outputFile(path.join(projectDir, \"b2\", \"file\"), \"data\"),\n    ])\n  },\n  packed: context => {\n    return BluebirdPromise.all([\n      assertThat(path.join(context.getResources(Platform.LINUX), \"app.asar.unpacked\", \"assets\")).isDirectory(),\n      assertThat(path.join(context.getResources(Platform.LINUX), \"app.asar.unpacked\", \"b2\")).isDirectory(),\n    ])\n  },\n}))\n\ntest.ifDevOrLinuxCi(\"unpackDir\", () => {\n  return assertPack(\"test-app\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n    devMetadata: {\n      build: {\n        asar: {\n          unpackDir: \"{assets,b2}\"\n        },\n      }\n    }\n  }, {\n    projectDirCreated: projectDir => {\n      return BluebirdPromise.all([\n        outputFile(path.join(projectDir, \"app\", \"assets\", \"file\"), \"data\"),\n        outputFile(path.join(projectDir, \"app\", \"b2\", \"file\"), \"data\"),\n      ])\n    },\n    packed: context => {\n      return BluebirdPromise.all([\n        assertThat(path.join(context.getResources(Platform.LINUX), \"app.asar.unpacked\", \"assets\")).isDirectory(),\n        assertThat(path.join(context.getResources(Platform.LINUX), \"app.asar.unpacked\", \"b2\")).isDirectory(),\n      ])\n    },\n  })\n})\n\ntest.ifNotWindows(\"link\", app({\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n}, {\n  projectDirCreated: projectDir => {\n    return symlink(path.join(projectDir, \"index.js\"), path.join(projectDir, \"foo.js\"))\n  },\n  packed: async context => {\n    assertThat(statFile(path.join(context.getResources(Platform.LINUX), \"app.asar\"), \"foo.js\", false)).hasProperties({\n      link: \"index.js\",\n    })\n  },\n}))\n\n// skip on MacOS because we want test only / and \\\ntest.ifNotCiOsx(\"ignore node_modules known dev dep\", () => {\n  const build: any = {\n    asar: false,\n    ignore: (file: string) => {\n      return file === \"/ignoreMe\"\n    }\n  }\n\n  return assertPack(\"test-app-one\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n    devMetadata: {\n      build: build\n    }\n  }, {\n    projectDirCreated: projectDir => {\n      return BluebirdPromise.all([\n        modifyPackageJson(projectDir, data => {\n          data.devDependencies = Object.assign({\n              \"electron-osx-sign-tf\": \"*\",\n            }, data.devDependencies)\n        }),\n        outputFile(path.join(projectDir, \"node_modules\", \"electron-osx-sign-tf\", \"package.json\"), \"{}\"),\n        outputFile(path.join(projectDir, \"ignoreMe\"), \"\"),\n      ])\n    },\n    packed: context => {\n      return BluebirdPromise.all([\n        assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \"node_modules\", \"electron-osx-sign-tf\")).doesNotExist(),\n        assertThat(path.join(context.getResources(Platform.LINUX), \"app\", \"ignoreMe\")).doesNotExist(),\n      ])\n    },\n  })\n})\n\n// https://github.com/electron-userland/electron-builder/issues/611\ntest.ifDevOrLinuxCi(\"failed peer dep\", () => {\n  return assertPack(\"test-app-one\", {\n    targets: Platform.LINUX.createTarget(DIR_TARGET),\n  }, {\n    npmInstallBefore: true,\n    projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n      //noinspection SpellCheckingInspection\n      data.dependencies = {\n        \"rc-datepicker\": \"4.0.0\",\n        \"react\": \"15.2.1\",\n        \"react-dom\": \"15.2.1\"\n      }\n    }),\n  })\n})\n\ntest(\"extraResources\", async () => {\n  for (let platform of getPossiblePlatforms().keys()) {\n    const osName = platform.buildConfigurationKey\n\n    const winDirPrefix = \"lib/net45/resources/\"\n\n    //noinspection SpellCheckingInspection\n    await assertPack(\"test-app\", {\n      // to check NuGet package\n      targets: platform.createTarget(platform === Platform.WINDOWS ? null : DIR_TARGET),\n    }, {\n      projectDirCreated: projectDir => {\n        return BluebirdPromise.all([\n          modifyPackageJson(projectDir, data => {\n            data.build.extraResources = [\n              \"foo\",\n              \"bar/hello.txt\",\n              \"bar/${arch}.txt\",\n              \"${os}/${arch}.txt\",\n            ]\n\n            data.build[osName] = {\n              extraResources: [\n                \"platformSpecificR\"\n              ],\n              extraFiles: [\n                \"platformSpecificF\"\n              ],\n            }\n          }),\n          outputFile(path.join(projectDir, \"foo/nameWithoutDot\"), \"nameWithoutDot\"),\n          outputFile(path.join(projectDir, \"bar/hello.txt\"), \"data\"),\n          outputFile(path.join(projectDir, `bar/${process.arch}.txt`), \"data\"),\n          outputFile(path.join(projectDir, `${osName}/${process.arch}.txt`), \"data\"),\n          outputFile(path.join(projectDir, \"platformSpecificR\"), \"platformSpecificR\"),\n          outputFile(path.join(projectDir, \"ignoreMe.txt\"), \"ignoreMe\"),\n        ])\n      },\n      packed: async context => {\n        const base = path.join(context.outDir, platform.buildConfigurationKey + `${platform === Platform.MAC ? \"\" : \"-unpacked\"}`)\n        let resourcesDir = path.join(base, \"resources\")\n        if (platform === Platform.MAC) {\n          resourcesDir = path.join(base, \"TestApp.app\", \"Contents\", \"Resources\")\n        }\n        await assertThat(path.join(resourcesDir, \"foo\")).isDirectory()\n        await assertThat(path.join(resourcesDir, \"foo\", \"nameWithoutDot\")).isFile()\n        await assertThat(path.join(resourcesDir, \"bar\", \"hello.txt\")).isFile()\n        await assertThat(path.join(resourcesDir, \"bar\", `${process.arch}.txt`)).isFile()\n        await assertThat(path.join(resourcesDir, osName, `${process.arch}.txt`)).isFile()\n        await assertThat(path.join(resourcesDir, \"platformSpecificR\")).isFile()\n        await assertThat(path.join(resourcesDir, \"ignoreMe.txt\")).doesNotExist()\n      },\n      expectedContents: platform === Platform.WINDOWS ? pathSorter(expectedWinContents.concat(\n        winDirPrefix + \"bar/hello.txt\",\n        winDirPrefix + \"bar/x64.txt\",\n        winDirPrefix + \"foo/nameWithoutDot\",\n        winDirPrefix + \"platformSpecificR\",\n        winDirPrefix + \"win/x64.txt\"\n      )) : null,\n    })\n  }\n})\n\ntest(\"extraResources - one-package\", async () => {\n  for (let platform of [process.platform === \"win32\" ? Platform.WINDOWS : Platform.LINUX]) {\n    const osName = platform.buildConfigurationKey\n\n    const winDirPrefix = \"lib/net45/resources/\"\n\n    //noinspection SpellCheckingInspection\n    await assertPack(\"test-app-one\", {\n      // to check NuGet package\n      targets: platform.createTarget(platform === Platform.WINDOWS ? null : DIR_TARGET),\n      devMetadata: {\n        build: {\n          asar: true,\n        },\n      },\n    }, {\n      projectDirCreated: projectDir => {\n        return BluebirdPromise.all([\n          modifyPackageJson(projectDir, data => {\n            data.build.extraResources = [\n              \"foo\",\n              \"bar/hello.txt\",\n              \"bar/${arch}.txt\",\n              \"${os}/${arch}.txt\",\n            ]\n\n            data.build[osName] = {\n              extraResources: [\n                \"platformSpecificR\"\n              ],\n              extraFiles: [\n                \"platformSpecificF\"\n              ],\n            }\n          }),\n          outputFile(path.join(projectDir, \"foo/nameWithoutDot\"), \"nameWithoutDot\"),\n          outputFile(path.join(projectDir, \"bar/hello.txt\"), \"data\"),\n          outputFile(path.join(projectDir, `bar/${process.arch}.txt`), \"data\"),\n          outputFile(path.join(projectDir, `${osName}/${process.arch}.txt`), \"data\"),\n          outputFile(path.join(projectDir, \"platformSpecificR\"), \"platformSpecificR\"),\n          outputFile(path.join(projectDir, \"ignoreMe.txt\"), \"ignoreMe\"),\n        ])\n      },\n      packed: async context => {\n        const base = path.join(context.outDir, platform.buildConfigurationKey + `${platform === Platform.MAC ? \"\" : \"-unpacked\"}`)\n        let resourcesDir = path.join(base, \"resources\")\n        if (platform === Platform.MAC) {\n          resourcesDir = path.join(base, \"TestApp.app\", \"Contents\", \"Resources\")\n        }\n        const appDir = path.join(resourcesDir, \"app\")\n\n        await assertThat(path.join(resourcesDir, \"foo\")).isDirectory()\n        await assertThat(path.join(appDir, \"foo\")).doesNotExist()\n\n        await assertThat(path.join(resourcesDir, \"foo\", \"nameWithoutDot\")).isFile()\n        await assertThat(path.join(appDir, \"foo\", \"nameWithoutDot\")).doesNotExist()\n\n        await assertThat(path.join(resourcesDir, \"bar\", \"hello.txt\")).isFile()\n        await assertThat(path.join(resourcesDir, \"bar\", `${process.arch}.txt`)).isFile()\n        await assertThat(path.join(appDir, \"bar\", `${process.arch}.txt`)).doesNotExist()\n\n        await assertThat(path.join(resourcesDir, osName, `${process.arch}.txt`)).isFile()\n        await assertThat(path.join(resourcesDir, \"platformSpecificR\")).isFile()\n        await assertThat(path.join(resourcesDir, \"ignoreMe.txt\")).doesNotExist()\n      },\n      expectedContents: platform === Platform.WINDOWS ? pathSorter(expectedWinContents.concat(\n        winDirPrefix + \"bar/hello.txt\",\n        winDirPrefix + \"bar/x64.txt\",\n        winDirPrefix + \"foo/nameWithoutDot\",\n        winDirPrefix + \"platformSpecificR\",\n        winDirPrefix + \"win/x64.txt\"\n      )) : null,\n    })\n  }\n})\n\ntest.ifDevOrLinuxCi(\"copy only js files - no asar\", appThrows(/Application \"package.json\" does not exist/, {\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n  devMetadata: {\n    build: {\n      \"files\": [\"**/*.js\"],\n      asar: false,\n    }\n  }\n}))\n\ntest.ifDevOrLinuxCi(\"copy only js files - asar\", appThrows(/Application \"package.json\" in the /, {\n  targets: Platform.LINUX.createTarget(DIR_TARGET),\n  devMetadata: {\n    build: {\n      \"files\": [\"**/*.js\"],\n      asar: true,\n    }\n  }\n}))"
  ]
}
