{
  "version": 3,
  "file": "macPackagerTest.js",
  "sourceRoot": "",
  "sources": [
    "../src/macPackagerTest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import test from \"./helpers/avaEx\"\nimport { assertPack, platform, modifyPackageJson, signed, app, appThrows } from \"./helpers/packTester\"\nimport OsXPackager from \"out/macPackager\"\nimport { writeFile, remove, copy, mkdir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { BuildInfo } from \"out/platformPackager\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { Platform, MacOptions, createTargets } from \"out\"\nimport { SignOptions, FlatOptions } from \"electron-osx-sign-tf\"\nimport { Arch } from \"out\"\nimport { Target } from \"out/platformPackager\"\nimport { DmgTarget } from \"out/targets/dmg\"\nimport { DIR_TARGET } from \"out/targets/targetFactory\"\nimport { attachAndExecute } from \"out/targets/dmg\"\nimport { getTempName } from \"out/util/util\"\nimport { exec } from \"out/util/util\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"out/util/awaiter\")\n\ntest.ifOsx(\"two-package\", () => assertPack(\"test-app\", {targets: createTargets([Platform.MAC], null, \"all\")}, {signed: true, useTempDir: true}))\n\ntest.ifOsx(\"one-package\", app(platform(Platform.MAC), {signed: true}))\n\nfunction createTargetTest(target: Array<string>, expectedContents: Array<string>) {\n  return app({\n    targets: Platform.MAC.createTarget(),\n    devMetadata: {\n      build: {\n        mac: {\n          target: target,\n        }\n      }\n    }\n  }, {\n    useTempDir: true,\n    expectedContents: expectedContents,\n    signed: target.includes(\"mas\"),\n    packed: async (context) => {\n      if (!target.includes(\"tar.gz\")) {\n        return\n      }\n\n      const tempDir = path.join(context.outDir, getTempName())\n      await mkdir(tempDir)\n      await exec(\"tar\", [\"xf\", path.join(context.outDir, \"mac\", \"Test App ßW-1.1.0-mac.tar.gz\")], {cwd: tempDir})\n      await assertThat(path.join(tempDir, \"Test App ßW.app\")).isDirectory()\n    }\n  })\n}\n\ntest(\"only zip\", createTargetTest([\"zip\"], [\"Test App ßW-1.1.0-mac.zip\"]))\n\ntest(\"tar.gz\", createTargetTest([\"tar.gz\"], [\"Test App ßW-1.1.0-mac.tar.gz\"]))\n\n// todo failed on Travis CI\n//test(\"tar.xz\", createTargetTest([\"tar.xz\"], [\"Test App ßW-1.1.0-mac.tar.xz\"]))\n\ntest.ifOsx(\"invalid target\", t => t.throws(createTargetTest([\"ttt\"], [])(), \"Unknown target: ttt\"))\n\nif (process.env.CSC_KEY_PASSWORD == null || process.platform !== \"darwin\") {\n  console.warn(\"Skip mas tests because CSC_KEY_PASSWORD is not defined\")\n}\nelse {\n  test.ifOsx(\"mas\", createTargetTest([\"mas\"], [\"Test App ßW-1.1.0.pkg\"]))\n  test.ifOsx(\"mas and 7z\", createTargetTest([\"mas\", \"7z\"], [\"Test App ßW-1.1.0-mac.7z\", \"Test App ßW-1.1.0.pkg\"]))\n\n  test.ifOsx(\"custom mas\", () => {\n    let platformPackager: CheckingMacPackager = null\n    return assertPack(\"test-app-one\", signed({\n      targets: Platform.MAC.createTarget(),\n      platformPackagerFactory: (packager, platform, cleanupTasks) => platformPackager = new CheckingMacPackager(packager),\n      devMetadata: {\n        build: {\n          mac: {\n            target: [\"mas\"],\n          },\n          mas: {\n            entitlements: \"mas-entitlements file path\",\n            entitlementsInherit: \"mas-entitlementsInherit file path\",\n          }\n        }\n      }\n    }), {\n      packed: () => {\n        assertThat(platformPackager.effectiveSignOptions).hasProperties({\n          entitlements: \"mas-entitlements file path\",\n          \"entitlements-inherit\": \"mas-entitlementsInherit file path\",\n        })\n        return BluebirdPromise.resolve(null)\n      }\n    })\n  })\n\n  test.ifOsx(\"entitlements in the package.json\", () => {\n    let platformPackager: CheckingMacPackager = null\n    return assertPack(\"test-app-one\", signed({\n      targets: Platform.MAC.createTarget(),\n      platformPackagerFactory: (packager, platform, cleanupTasks) => platformPackager = new CheckingMacPackager(packager),\n      devMetadata: {\n        build: {\n          mac: {\n            entitlements: \"osx-entitlements file path\",\n            entitlementsInherit: \"osx-entitlementsInherit file path\",\n          }\n        }\n      }\n    }), {\n      packed: () => {\n        assertThat(platformPackager.effectiveSignOptions).hasProperties({\n          entitlements: \"osx-entitlements file path\",\n          \"entitlements-inherit\": \"osx-entitlementsInherit file path\",\n        })\n        return BluebirdPromise.resolve()\n      }\n    })\n  })\n\n  test.ifOsx(\"entitlements in build dir\", () => {\n    let platformPackager: CheckingMacPackager = null\n    return assertPack(\"test-app-one\", signed({\n      targets: Platform.MAC.createTarget(),\n      platformPackagerFactory: (packager, platform, cleanupTasks) => platformPackager = new CheckingMacPackager(packager),\n    }), {\n      projectDirCreated: projectDir => BluebirdPromise.all([\n        writeFile(path.join(projectDir, \"build\", \"entitlements.mac.plist\"), \"\"),\n        writeFile(path.join(projectDir, \"build\", \"entitlements.mac.inherit.plist\"), \"\"),\n      ]),\n      packed: context => {\n        assertThat(platformPackager.effectiveSignOptions).hasProperties({\n          entitlements: path.join(context.projectDir, \"build\", \"entitlements.mac.plist\"),\n          \"entitlements-inherit\": path.join(context.projectDir, \"build\", \"entitlements.mac.inherit.plist\"),\n        })\n        return BluebirdPromise.resolve()\n      }\n    })\n  })\n}\n\n// test also \"only dmg\"\ntest.ifOsx(\"no background\", app({\n  targets: Platform.MAC.createTarget(\"dmg\"),\n  devMetadata: {\n    build: {\n      // dmg can mount only one volume name, so, to test in parallel, we set different product name\n      productName: \"Test ß\",\n      dmg: {\n        background: null,\n      },\n    }\n  }\n}, {\n  expectedContents: [\"Test ß-1.1.0.dmg\"],\n  packed: (context) => {\n    return attachAndExecute(path.join(context.outDir, \"mac/Test ß-1.1.0.dmg\"), false, () => {\n      return assertThat(path.join(\"/Volumes/Test ß 1.1.0/.background\")).doesNotExist()\n    })\n  }\n}))\n\ntest.ifOsx(\"unset dmg icon\", app({\n  targets: Platform.MAC.createTarget(\"dmg\"),\n  devMetadata: {\n    build: {\n      // dmg can mount only one volume name, so, to test in parallel, we set different product name\n      productName: \"Test ß No Volume Icon\",\n      dmg: {\n        icon: null,\n      },\n    }\n  }\n}, {\n  expectedContents: [\"Test ß No Volume Icon-1.1.0.dmg\"],\n  packed: (context) => {\n    return attachAndExecute(path.join(context.outDir, \"mac/Test ß No Volume Icon-1.1.0.dmg\"), false, () => {\n      return BluebirdPromise.all([\n        assertThat(path.join(\"/Volumes/Test ß No Volume Icon 1.1.0/.background/background.tiff\")).isFile(),\n        assertThat(path.join(\"/Volumes/Test ß No Volume Icon 1.1.0/.VolumeIcon.icns\")).doesNotExist(),\n      ])\n    })\n  }\n}))\n\ntest.ifOsx(\"no build directory\", app(platform(Platform.MAC), {\n  projectDirCreated: projectDir => remove(path.join(projectDir, \"build\"))\n}))\n\ntest.ifOsx(\"custom background - old way\", () => {\n  let platformPackager: CheckingMacPackager = null\n  const customBackground = \"customBackground.tiff\"\n  return assertPack(\"test-app-one\", {\n    targets: Platform.MAC.createTarget(),\n    platformPackagerFactory: (packager, platform, cleanupTasks) => platformPackager = new CheckingMacPackager(packager)\n  }, {\n    projectDirCreated: projectDir => BluebirdPromise.all([\n      copy(path.join(__dirname, \"..\", \"..\", \"templates\", \"dmg\", \"background.tiff\"), path.join(projectDir, customBackground)),\n      modifyPackageJson(projectDir, data => {\n        data.build.osx = {\n          background: customBackground,\n          icon: \"foo.icns\",\n        }\n      })\n    ]),\n    packed: () => {\n      assertThat(platformPackager.effectiveDistOptions.background).isEqualTo(customBackground)\n      assertThat(platformPackager.effectiveDistOptions.icon).isEqualTo(\"foo.icns\")\n      return BluebirdPromise.resolve(null)\n    },\n  })\n})\n\ntest.ifOsx(\"custom background - new way\", () => {\n  let platformPackager: CheckingMacPackager = null\n  const customBackground = \"customBackground.png\"\n  return assertPack(\"test-app-one\", {\n    targets: Platform.MAC.createTarget(),\n    platformPackagerFactory: (packager, platform, cleanupTasks) => platformPackager = new CheckingMacPackager(packager)\n  }, {\n    projectDirCreated: projectDir => BluebirdPromise.all([\n      copy(path.join(__dirname, \"..\", \"..\", \"templates\", \"dmg\", \"background.tiff\"), path.join(projectDir, customBackground)),\n      modifyPackageJson(projectDir, data => {\n        data.build.mac = {\n          icon: \"customIcon\"\n        }\n\n        data.build.dmg = {\n          background: customBackground,\n          icon: \"foo.icns\",\n        }\n\n        data.build.osx = {\n          background: null,\n          icon: \"ignoreMe.icns\",\n        }\n      })\n    ]),\n    packed: async context => {\n      assertThat(platformPackager.effectiveDistOptions.background).isEqualTo(customBackground)\n      assertThat(platformPackager.effectiveDistOptions.icon).isEqualTo(\"foo.icns\")\n      assertThat(await platformPackager.getIconPath()).isEqualTo(path.join(context.projectDir, \"customIcon.icns\"))\n    },\n  })\n})\n\ntest.ifOsx(\"disable dmg icon (light), bundleVersion\", () => {\n  let platformPackager: CheckingMacPackager = null\n  return assertPack(\"test-app-one\", {\n    targets: Platform.MAC.createTarget(),\n    platformPackagerFactory: (packager, platform, cleanupTasks) => platformPackager = new CheckingMacPackager(packager),\n    devMetadata: {\n      build: {\n        dmg: {\n          icon: null,\n        },\n        mac: {\n          bundleVersion: \"50\"\n        },\n      },\n    }\n  }, {\n    packed: async () => {\n      assertThat(platformPackager.effectiveDistOptions.icon).isEqualTo(null)\n      assertThat(await platformPackager.getIconPath()).isNotEqualTo(null)\n      assertThat(platformPackager.appInfo.buildVersion).isEqualTo(\"50\")\n    },\n  })\n})\n\ntest.ifOsx(\"electronDist\", appThrows(/ENOENT: no such file or directory/, {\n  targets: Platform.OSX.createTarget(DIR_TARGET),\n}, {\n  projectDirCreated: projectDir => modifyPackageJson(projectDir, data => {\n    data.build.electronDist = \"foo\"\n  })\n}))\n\nclass CheckingMacPackager extends OsXPackager {\n  effectiveDistOptions: any\n  effectiveSignOptions: SignOptions\n  effectiveFlatOptions: FlatOptions\n\n  constructor(info: BuildInfo) {\n    super(info)\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    for (let target of targets) {\n      // do not use instanceof to avoid dmg require\n      if (target.name === \"dmg\") {\n        this.effectiveDistOptions = await (<DmgTarget>target).computeDmgOptions()\n        break\n      }\n    }\n    return await super.pack(outDir, arch, targets, postAsyncTasks)\n  }\n\n  async doPack(outDir: string, appOutDir: string, platformName: string, arch: Arch, customBuildOptions: MacOptions, postAsyncTasks: Array<Promise<any>> = null) {\n    // skip\n  }\n\n  async doSign(opts: SignOptions): Promise<any> {\n    this.effectiveSignOptions = opts\n  }\n\n  async doFlat(opts: FlatOptions): Promise<any> {\n    this.effectiveFlatOptions = opts\n  }\n\n  packageInDistributableFormat(appOutDir: string, targets: Array<Target>, promises: Array<Promise<any>>): void {\n    // skip\n  }\n}"
  ]
}
