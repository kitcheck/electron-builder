{
  "version": 3,
  "file": "ArtifactPublisherTest.js",
  "sourceRoot": "",
  "sources": [
    "../src/ArtifactPublisherTest.ts"
  ],
  "names": [],
  "mappings": ";;;;AAAA,wBAAiB,AAAiB,AAClC,AAAC;AAAD,kCAAgC,AAA6B,AAC7D,AAAC;AAAD,iCAA0B,AAA4B,AACtD,AAAC;AAAD,uBAAqB,AAAM,AAC3B,AAAC;AAAD,6BAA2B,AAAsB,AACjD,AAAC;AAAD,mCAAiC,AAA8B,AAC/D,AAAC;AAAD,0BAAgC,AAAa,AAG7C,AAAC;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAkB,AAAC;AAE7C,sBAAsB,AAAW,KAAE,AAAW;AAC5C,AAAM,WAAC,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAM,AAAE,AAAG,YAAC,AAAG,MAAG,AAAG,MAAG,AAAC,AAAC,AAAC,MAAG,AAAG,AAC1D;AAAC;AAED;AACE,AAAM,AAAC,eAAG,AAAY,aAAC,AAAC,GAAE,AAAE,AAAC,SAAI,AAAY,aAAC,AAAC,GAAE,AAAE,AAAC,SAAI,AAAY,aAAC,AAAC,GAAE,AAAE,AAAC,GAAE,AAC/E;AAAC;AAGD,MAAM,AAAK,QAAG,IAAI,AAAM,OAAC,AAA0D,4DAAE,AAAQ,AAAC,UAAC,AAAQ,AAAE;AACzG,MAAM,AAAQ,WAAG,OAAI,KAAC,AAAS,WAAE,AAAI,MAAE,AAAU,YAAE,AAAU,YAAE,AAAO,SAAE,AAAW,AAAC;AAOpF,wBAAwB,AAAQ;AAC9B,AAAE,AAAC,QAAC,AAAC,aAAY,iBAAS,AAAC,WAAC,AAAC;AAC3B,AAAM,eAAC,AAAC,EAAC,AAAW,eAAI,AAAI,QAAI,AAAC,aAAY,iBAAS,aAAI,AAAC,EAAC,AAAW,YAAC,AAAO,WAAI,AAAI,QAAI,AAAC,EAAC,AAAW,YAAC,AAAO,QAAC,AAAQ,QAAC,AAAyB,AAAC,AACtJ;AAAC,AACD,AAAI,WAAC,AAAC;AACJ,AAAM,eAAC,AAAK,AACd;AAAC,AACH;AAAC;AAED,8BAA8B,AAAY,MAAE,AAAgC;AAC1E,YAAI,QAAC,AAAI,MAAE;AACT,YAAI,AAAC;AACH,kBAAM,AAAY,AAAE,AACtB;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAc,eAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AACtB,AAAO,wBAAC,AAAI,KAAC,AAAC,EAAC,AAAW,YAAC,AAAO,AAAC,AACrC;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAC,AACT;AAAC,AACH;AAAC,AACH;AAAC,AAAC,AACJ;AAAC;AAED,QAAI,QAAC,AAAgB,kBAAE;AACrB,UAAM,AAAO,UAAG,AAAa,AAAE;AAE/B,UAAM,AAAS,YAAG,IAAI,mBAAgB,iBAAC,EAAC,AAAI,MAAE,AAAW,aAAE,AAAO,SAAE,AAAM,QAAE,AAAI,MAAE,AAAS,AAAC,aAAE,AAAO,SAAE,EAAC,AAAY,cAAE,AAA0C,AAAC,AAAC;AAClK,QAAI,AAAC;AACH,cAAM,AAAY,AAAG,wBAAQ,AAAO,OAAO;AAC3C,cAAM,AAAS,UAAC,AAAM,OAAC,AAAQ,UAAE,AAAY,AAAC;AAC9C,cAAM,AAAS,UAAC,AAAM,OAAC,AAAQ,UAAE,AAAY,AAAC,AAChD;AAAC,cACO,AAAC;AACP,cAAM,AAAS,UAAC,AAAa,AAAE,AACjC;AAAC,AACH;AAAC,AAAC;AAEF,AAAoB,qBAAC,AAAe,iBAAE;AACpC,UAAM,AAAS,gBAAO,kBAAe,gBAAC,AAAW,aAAE,AAAM,QAAE,AAAa,AAAE;AACxE,AAAW,qBAAE,AAAK,AACnB,AAAC;AAF0E,KAA1D;AAGlB,QAAI,AAAC;AACH,cAAM,AAAS,UAAC,AAAM,OAAC,AAAQ,AAAC;AAEhC,cAAM,AAAS,UAAC,AAAM,OAAC,AAAQ,AAAC,AAClC;AAAC,cACO,AAAC;AACP,cAAM,AAAS,UAAC,AAAa,AAAE,AACjC;AAAC,AACH;AAAC,AAAC;AAEF,AAAoB,qBAAC,AAAY,cAAE;AACjC,UAAM,AAAS,gBAAO,kBAAe,gBAAC,AAAW,aAAE,AAAM,QAAE,AAAa,AAAE;AACxE,AAAW,qBAAE,AAAK;AAClB,AAAK,eAAE,AAAK;AACZ,AAAU,oBAAE,AAAI,AACjB,AAAC;AAJ0E,KAA1D;AAKlB,QAAI,AAAC;AACH,cAAM,AAAS,UAAC,AAAM,OAAC,AAAQ,AAAC;AAChC,cAAM,AAAC,IAAG,MAAM,AAAS,UAAC,AAAU,AAAE;AACtC,qBAAU,WAAC,AAAC,AAAC,GAAC,AAAa;AACzB,AAAU,wBAAE,AAAI;AAChB,AAAK,mBAAE,AAAK,AACb,AAAC,AACJ;AAJ8B;AAI7B,cACO,AAAC;AACP,cAAM,AAAS,UAAC,AAAa,AAAE,AACjC;AAAC,AACH;AAAC,AAAC;AAEF,AAAoB,qBAAC,AAAmB,qBAAE;AAExC,UAAM,AAAS,gBAAO,kBAAe,gBAAC,AAAiB,mBAAE,AAAO,SAAE,AAAa,AAAE;AAC7E,AAAW,qBAAE,AAAK,AACnB,AAAC;AAF+E,KAAjE;AAGlB,QAAI,AAAC;AACH,cAAM,AAAS,UAAC,AAAM,OAAC,AAAQ,AAAC,AAClC;AAAC,cACO,AAAC;AACP,cAAM,AAAS,UAAC,AAAa,AAAE,AACjC;AAAC,AACH;AAAC,AAAC;AAEF,QAAI,QAAC,AAAkB,oBAAE;AACvB,UAAM,AAAQ;AACZ,AAAQ;AACN,AAAO,qBAAE,AAAO,AACjB;AAFS;AAGV,AAAW;AACT,AAAU,wBAAE,AAAc,AAC3B,AACF;AAHc;AAJO;AAQtB,UAAM,AAAS,YAAG,gBAAqB,gBAAC,AAAQ;AAC9C,AAAW,qBAAE,AAAU,AACxB;AAFiD,KAA1B,EAErB,EAAC,AAAQ,UAAE,AAAQ,UAAE,AAAgB,kBAAE,AAAK,AAAC,AAAC;AAEjD,iBAAU,WAAC,AAAS,AAAC,WAAC,AAAa;AACjC,AAAO,iBAAE,AAAS;AAClB,AAAM,gBAAE,AAAM;AACd,AAAO,iBAAE,AAAU;AACnB,AAAS,mBAAE,AAAO;AAClB,AAAK,eAAE,AAAO,AACf,AAAC,AACJ;AAPsC;AAOrC,AAAC",
  "sourcesContent": [
    "import test from \"./helpers/avaEx\"\nimport { GitHubPublisher } from \"out/publish/gitHubPublisher\"\nimport { HttpError } from \"out/publish/restApiRequest\"\nimport { join } from \"path\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { BintrayPublisher } from \"out/publish/BintrayPublisher\"\nimport { createPublisher } from \"out/builder\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"out/util/awaiter\")\n\nfunction getRandomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nfunction versionNumber() {\n  return `${getRandomInt(0, 99)}.${getRandomInt(0, 99)}.${getRandomInt(0, 99)}`\n}\n\n//noinspection SpellCheckingInspection\nconst token = new Buffer(\"Y2Y5NDdhZDJhYzJlMzg1OGNiNzQzYzcwOWZhNGI0OTk2NWQ4ZDg3Yg==\", \"base64\").toString()\nconst iconPath = join(__dirname, \"..\", \"fixtures\", \"test-app\", \"build\", \"icon.icns\")\n\n//test(\"GitHub unauthorized\", async (t) => {\n//  t.throws(await new GitHubPublisher(\"github-releases-test\", \"test-repo\", versionNumber(), \"incorrect token\")\n//    .releasePromise, /(Bad credentials|Unauthorized|API rate limit exceeded)/)\n//})\n\nfunction isApiRateError(e: Error): boolean {\n  if (e instanceof HttpError) {\n    return e.description != null && e instanceof HttpError && e.description.message != null && e.description.message.includes(\"API rate limit exceeded\")\n  }\n  else {\n    return false\n  }\n}\n\nfunction testAndIgnoreApiRate(name: string, testFunction: () => Promise<any>) {\n  test(name, async () => {\n    try {\n      await testFunction()\n    }\n    catch (e) {\n      if (isApiRateError(e)) {\n        console.warn(e.description.message)\n      }\n      else {\n        throw e\n      }\n    }\n  })\n}\n\ntest(\"Bintray upload\", async () => {\n  const version = versionNumber()\n  //noinspection SpellCheckingInspection\n  const publisher = new BintrayPublisher({user: \"actperepo\", package: \"test\", repo: \"generic\"}, version, {bintrayToken: \"5df2cadec86dff91392e4c419540785813c3db15\"})\n  try {\n    const artifactName = `icon-${version}.icns`\n    await publisher.upload(iconPath, artifactName)\n    await publisher.upload(iconPath, artifactName)\n  }\n  finally {\n    await publisher.deleteRelease()\n  }\n})\n\ntestAndIgnoreApiRate(\"GitHub upload\", async () => {\n  const publisher = new GitHubPublisher(\"actperepo\", \"ecb2\", versionNumber(), {\n    githubToken: token\n  })\n  try {\n    await publisher.upload(iconPath)\n    // test overwrite\n    await publisher.upload(iconPath)\n  }\n  finally {\n    await publisher.deleteRelease()\n  }\n})\n\ntestAndIgnoreApiRate(\"prerelease\", async () => {\n  const publisher = new GitHubPublisher(\"actperepo\", \"ecb2\", versionNumber(), {\n    githubToken: token,\n    draft: false,\n    prerelease: true,\n  })\n  try {\n    await publisher.upload(iconPath)\n    const r = await publisher.getRelease()\n    assertThat(r).hasProperties({\n      prerelease: true,\n      draft: false,\n    })\n  }\n  finally {\n    await publisher.deleteRelease()\n  }\n})\n\ntestAndIgnoreApiRate(\"GitHub upload org\", async () => {\n  //noinspection SpellCheckingInspection\n  const publisher = new GitHubPublisher(\"builder-gh-test\", \"darpa\", versionNumber(), {\n      githubToken: token\n    })\n  try {\n    await publisher.upload(iconPath)\n  }\n  finally {\n    await publisher.deleteRelease()\n  }\n})\n\ntest(\"create publisher\", async () => {\n  const packager: any = {\n    metadata: {\n      version: \"2.0.0\",\n    },\n    devMetadata: {\n      repository: \"develar/test\"\n    },\n  }\n  const publisher = await createPublisher(packager, {\n    githubToken: \"__test__\",\n  }, {provider: \"github\", vPrefixedTagName: false})\n\n  assertThat(publisher).hasProperties({\n    \"owner\": \"develar\",\n    \"repo\": \"test\",\n    \"token\": \"__test__\",\n    \"version\": \"2.0.0\",\n    \"tag\": \"2.0.0\",\n  })\n})"
  ]
}
