{
  "version": 3,
  "file": "winPackagerTest.js",
  "sourceRoot": "",
  "sources": [
    "../src/winPackagerTest.ts"
  ],
  "names": [],
  "mappings": ";;;;AAAA,sBAA0C,AAAK,AAC/C,AAAC;AAAD,wBAAiB,AAAiB,AAClC,AAAC;AAAD,6BAA2E,AAAsB,AACjG,AAAC;AAAD,6BAAyC,AAAY,AACrD,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,8BAA4B,AAAiB,AAC7C,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,6BAA2B,AAAsB,AACjD,AAAC;AAKD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAkB,AAAC;AAE7C,QAAI,QAAC,AAAU,WAAC,AAAK,OAAE,aAAG,IAAC,EAAC,AAAO,SAAE,MAAQ,SAAC,AAAO,QAAC,AAAY,aAAC,CAAC,AAAS,WAAE,AAAK,AAAC,AAAC,AAAC,WAAE,EAAC,AAAM,QAAE,AAAI,AAAC,AAAC,AAAC;AAGzG,QAAI,QAAC,AAAI,KAAC,AAAe,8BAAK;AAC5B,AAAO,aAAE,MAAQ,SAAC,AAAO,QAAC,AAAY,aAAC,AAAI,MAAE,MAAI,KAAC,AAAI,AAAC;AACvD,AAAW;AACT,AAAK;AACH,AAAe;AACb,AAAc,gCAAE,AAAgD;AAChE,AAAG,qBAAE,AAAI,AACV,AACF,AACF,AACF,AAAC,AAAC;AANoB;AADZ;AADI;AAFgB,CAAJ;AAY3B,QAAI,QAAC,AAAY,aAAC,AAAc,6BAAK;AACnC,AAAO,aAAE,MAAQ,SAAC,AAAO,QAAC,AAAY,aAAC,CAAC,AAAU,YAAE,AAAM,AAAC,AAAC;AAC5D,AAAW;AACT,AAAO,iBAAE,AAAc,AACxB,AACF,AAAC,AAAC;AAHiB;AAFkB,CAAJ;AAOlC,QAAI,QAAC,AAAY,aAAC,AAAc,6BAAK;AACnC,AAAO,aAAE,MAAQ,SAAC,AAAO,QAAC,AAAY,aAAC,CAAC,AAAU,YAAE,AAAM,AAAC,AAAC;AAC5D,AAAW;AACT,AAAO,iBAAE,AAAc,AACxB,AACF,AAAC,AAAC;AAHiB;AAFkB,CAAJ;AAOlC,QAAI,QAAC,AAAU,WAAC,AAAe,iBAAE,AAAC,OAAM,AAAM,oBAAW,WAAC,AAAc,gBAAE,aAAQ,SAAC,MAAQ,SAAC,AAAO,AAAC;AAEhG,AAAiB,uBAAE,AAAE,mBAAqB,kBAAC,AAAE,IAAE,AAAI;AACjD,AAAI,aAAC,AAAK,MAAC,AAAG;AACZ,AAAG,iBAAE,AAAO,AACb,AACH;AAHmB;AAGlB,AAAC,AACH,AAAC,AAAE,KALuB;AAD3B,CAD6C,CAAT,AAAC,EAOqC,AAAC,AAC5E;AAED,QAAI,QAAC,AAAkD,oDAAE;AACvD,QAAI,AAAgB,mBAAwB,AAAI;AAChD,QAAI,AAAc,iBAAW,AAAI;AAEjC,AAAM,wBAAW,WAAC,AAAc;AAC9B,AAAO,iBAAE,MAAQ,SAAC,AAAO,QAAC,AAAY,AAAE;AACxC,AAAuB,iCAAE,CAAC,AAAQ,UAAE,AAAQ,UAAE,AAAY,iBAAK,AAAgB,mBAAG,IAAI,AAAmB,oBAAC,AAAQ,AAAC;AACnH,AAAW;AACT,AAAK;AACH,AAAG;AACD,AAAmB,yCAAE,AAAM,AAC5B,AACF,AACF,AACF;AALU;AADA;AADI;AAHmB,KAA3B;AAWL,AAAiB,2BAAE,AAAE;AACnB,AAAc,6BAAG,AAAI,KAAC,AAAI,KAAC,AAAE,IAAE,AAAO,SAAE,AAAqB,AAAC;AAC9D,AAAM,8BAAgB,QAAC,AAAG,KACxB,aAAI,KAAC,aAAY,aAAC,AAAqB,AAAC,wBAAE,AAAc,AAAC,8BACxC,kBAAC,AAAE,IAAE,AAAI;AACxB,AAAI,qBAAC,AAAK,MAAC,AAAG;AACZ,AAAe,qCAAE,AAAY;AAC7B,AAAmB,yCAAE,AAAkB,AACxC,AACH;AAJmB;AAIlB,AAAC,AAAC,AAAC,AACR,aANI,CAFyB,CAApB;AAQR;AACD,AAAM,gBAAE;AACN,yBAAU,WAAC,AAAgB,iBAAC,AAAoB,qBAAC,AAAU,AAAC,YAAC,AAAS,UAAC,AAAc,AAAC;AACtF,yBAAU,WAAC,AAAgB,iBAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAS,UAAC,AAAY,AAAC;AACrE,yBAAU,WAAC,AAAgB,iBAAC,AAAW,YAAC,AAAQ,AAAC,UAAC,AAAS,UAAC,AAAM,AAAC;AACnE,AAAM,mBAAC,WAAe,QAAC,AAAO,QAAC,AAAI,AAAC,AACtC;AAAC,AACF,AAAC,AACJ;AAnBK;AAmBJ,AAAC;AAEF,QAAI,QAAC,AAAU,WAAC,AAAY,cAAE,AAAC,OAAM,AAAM,oBAAW,WAAC,AAAc,gBAAE,aAAQ,SAAC,MAAQ,SAAC,AAAO,AAAC;AAC/F,AAAiB,uBAAE,AAAU,cAAI,aAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAO,SAAE,AAAe,AAAC,kBAAE,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAO,SAAE,AAAU,AAAC,AAAC,AACrI,AAAC;AAFiG,CAAvD,CAAT,AAAC,EAEhC,AAA4D,AAAC,AAAC;AAElE,QAAI,QAAC,AAAU,WAAC,AAAmB,qBAAE,AAAC,OAAM,AAAM,oBAAW,WAAC,AAAc,gBAAE,aAAQ,SAAC,MAAQ,SAAC,AAAO,AAAC;AACtG,AAAiB,uBAAE,AAAU,cAAI,aAAU,WAAC,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAO,SAAE,AAAU,AAAC,aAAE,AAAK,AAAC,AAC/F,AAAC;AAFwG,CAAvD,CAAT,AAAC,EAEvC,AAAoD,AAAC,AAAC;AAE1D,QAAI,QAAC,AAAK,MAAC,AAAa,eAAE;AACxB,QAAI,AAAgB,mBAAwB,AAAI;AAChD,AAAM,wBAAW,WAAC,AAAc;AAC9B,AAAO,iBAAE,MAAQ,SAAC,AAAO,QAAC,AAAY,AAAE;AACxC,AAAuB,iCAAE,CAAC,AAAQ,UAAE,AAAQ,UAAE,AAAY,iBAAK,AAAgB,mBAAG,IAAI,AAAmB,oBAAC,AAAQ,AAAC,AACpH;AAHiC,KAA3B;AAIL,AAAiB,2BAAE,AAAU,yBAAmB,QAAC,AAAG,KAClD,aAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAO,SAAE,AAAU,AAAC,aAAE,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAgB,AAAC,AAAC,iCAC1E,kBAAC,AAAU,YAAE,AAAI;AAChC,AAAI,iBAAC,AAAK,MAAC,AAAG;AACZ,AAAI,sBAAE,AAAY,AACnB,AACH;AAHmB;AAGlB,AAAC,AACH,AAAC,SALA,CAFmD,CAApB;AAQjC,AAAM,gBAAQ,AAAO,OAAb;AACN,yBAAU,YAAC,MAAM,AAAgB,iBAAC,AAAW,AAAE,AAAC,gBAAC,AAAS,UAAC,AAAI,KAAC,AAAI,KAAC,AAAO,QAAC,AAAU,YAAE,AAAgB,AAAC,AAAC;AAC3G,AAAM,mBAAC,WAAe,QAAC,AAAO,AAAE,AAClC;AAAC,AACF,AAAC,AACJ;AAdK;AAcJ,AAAC;AAEF,QAAI,QAAC,AAAY,aAAC,AAAI,MAAE,AAAC,OAAM,AAAM,oBAAW,WAAC,AAAc;AAC7D,AAAO,aAAE,MAAQ,SAAC,AAAO,QAAC,AAAY,aAAC,CAAC,AAAK,AAAC,AAAC;AAC/C,AAAW;AACT,AAAK;AACH,AAAG;AACD,AAAsB,wCAAE,AAAI,AAC7B,AACF,AACF,AACF,AAAC;AALS;AADA;AADI;AAFkD,CAA3B,CAAT,AAAC,EAS1B,AAAkD,AAAC,AAAC;AAExD,kCAAkC,cAAW;AAI3C,gBAAY,AAAe;AACzB,cAAM,AAAI,AAAC,AACb;AAAC;AAEK,AAAI,SAAC,AAAc,QAAE,AAAU,MAAE,AAAsB,SAAE,AAAmC;;AAEhG,kBAAM,AAAW,cAAiC,AAAO,QAAC,AAA6B,AAAC,+BAAC,AAAO;AAChG,AAAI,iBAAC,AAAoB,uBAAG,AAAM,MAAC,IAAI,AAAW,YAAC,AAAI,AAAC,MAAC,AAA2B,AAAE,AAAC;AAEvF,kBAAM,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAgB,iBAAC,AAAM,QAAE,AAAI,AAAC,AAAC,AACtD;AAAC;AAAA;AAED,AAA4B,iCAAC,AAAc,QAAE,AAAiB,WAAE,AAAU,MAAE,AAAsB,SAAE,AAA6B,UAEjI,CAAC;AAES,AAAM,WAAC,AAAiB;AAChC,AAAI,aAAC,AAAW,cAAG,AAAI;AACvB,AAAM,eAAC,WAAe,QAAC,AAAO,QAAC,AAAI,AAAC,AACtC;AAAC,AACH,AAAC;;AAAA",
  "sourcesContent": [
    "import { Platform, Arch, BuildInfo } from \"out\"\nimport test from \"./helpers/avaEx\"\nimport { assertPack, platform, modifyPackageJson, getTestAsset, app } from \"./helpers/packTester\"\nimport { outputFile, rename, copy } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { WinPackager } from \"out/winPackager\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { SignOptions } from \"out/windowsCodeSign\"\nimport SquirrelWindowsTarget from \"out/targets/squirrelWindows\"\nimport { Target } from \"out/platformPackager\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"out/util/awaiter\")\n\ntest.ifNotCiOsx(\"win\", app({targets: Platform.WINDOWS.createTarget([\"default\", \"zip\"])}, {signed: true}))\n\n// very slow\ntest.skip(\"delta and msi\", app({\n  targets: Platform.WINDOWS.createTarget(null, Arch.ia32),\n  devMetadata: {\n    build: {\n      squirrelWindows: {\n        remoteReleases: \"https://github.com/develar/__test-app-releases\",\n        msi: true,\n      },\n    }\n  },\n}))\n\ntest.ifDevOrWinCi(\"beta version\", app({\n  targets: Platform.WINDOWS.createTarget([\"squirrel\", \"nsis\"]),\n  devMetadata: <any>{\n    version: \"3.0.0-beta.2\",\n  }\n}))\n\ntest.ifDevOrWinCi(\"beta version\", app({\n  targets: Platform.WINDOWS.createTarget([\"squirrel\", \"nsis\"]),\n  devMetadata: <any>{\n    version: \"3.0.0-beta.2\",\n  }\n}))\n\ntest.ifNotCiOsx(\"msi as string\", t => t.throws(assertPack(\"test-app-one\", platform(Platform.WINDOWS),\n  {\n    projectDirCreated: it => modifyPackageJson(it, data => {\n      data.build.win = {\n        msi: \"false\",\n      }\n    })\n  }), `msi expected to be boolean value, but string '\"false\"' was specified`)\n)\n\ntest(\"detect install-spinner, certificateFile/password\", () => {\n  let platformPackager: CheckingWinPackager = null\n  let loadingGifPath: string = null\n\n  return assertPack(\"test-app-one\", {\n    targets: Platform.WINDOWS.createTarget(),\n    platformPackagerFactory: (packager, platform, cleanupTasks) => platformPackager = new CheckingWinPackager(packager),\n    devMetadata: {\n      build: {\n        win: {\n          certificatePassword: \"pass\",\n        }\n      }\n    }\n  }, {\n    projectDirCreated: it => {\n      loadingGifPath = path.join(it, \"build\", \"install-spinner.gif\")\n      return BluebirdPromise.all([\n        copy(getTestAsset(\"install-spinner.gif\"), loadingGifPath),\n        modifyPackageJson(it, data => {\n          data.build.win = {\n            certificateFile: \"secretFile\",\n            certificatePassword: \"mustBeOverridden\",\n          }\n        })])\n    },\n    packed: () => {\n      assertThat(platformPackager.effectiveDistOptions.loadingGif).isEqualTo(loadingGifPath)\n      assertThat(platformPackager.signOptions.cert).isEqualTo(\"secretFile\")\n      assertThat(platformPackager.signOptions.password).isEqualTo(\"pass\")\n      return BluebirdPromise.resolve(null)\n    },\n  })\n})\n\ntest.ifNotCiOsx(\"icon < 256\", t => t.throws(assertPack(\"test-app-one\", platform(Platform.WINDOWS), {\n  projectDirCreated: projectDir => rename(path.join(projectDir, \"build\", \"incorrect.ico\"), path.join(projectDir, \"build\", \"icon.ico\"))\n}), /Windows icon size must be at least 256x256, please fix \".+/))\n\ntest.ifNotCiOsx(\"icon not an image\", t => t.throws(assertPack(\"test-app-one\", platform(Platform.WINDOWS), {\n  projectDirCreated: projectDir => outputFile(path.join(projectDir, \"build\", \"icon.ico\"), \"foo\")\n}), /Windows icon is not valid ico file, please fix \".+/))\n\ntest.ifOsx(\"custom icon\", () => {\n  let platformPackager: CheckingWinPackager = null\n  return assertPack(\"test-app-one\", {\n    targets: Platform.WINDOWS.createTarget(),\n    platformPackagerFactory: (packager, platform, cleanupTasks) => platformPackager = new CheckingWinPackager(packager)\n  }, {\n    projectDirCreated: projectDir => BluebirdPromise.all([\n      rename(path.join(projectDir, \"build\", \"icon.ico\"), path.join(projectDir, \"customIcon.ico\")),\n      modifyPackageJson(projectDir, data => {\n        data.build.win = {\n          icon: \"customIcon\"\n        }\n      })\n    ]),\n    packed: async context => {\n      assertThat(await platformPackager.getIconPath()).isEqualTo(path.join(context.projectDir, \"customIcon.ico\"))\n      return BluebirdPromise.resolve()\n    },\n  })\n})\n\ntest.ifNotWindows(\"ev\", t => t.throws(assertPack(\"test-app-one\", {\n  targets: Platform.WINDOWS.createTarget([\"dir\"]),\n  devMetadata: {\n    build: {\n      win: {\n        certificateSubjectName: \"ev\",\n      }\n    }\n  }\n}), /certificateSubjectName supported only on Windows/))\n\nclass CheckingWinPackager extends WinPackager {\n  effectiveDistOptions: any\n  signOptions: SignOptions | null\n\n  constructor(info: BuildInfo) {\n    super(info)\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    // skip pack\n    const helperClass: typeof SquirrelWindowsTarget = require(\"out/targets/squirrelWindows\").default\n    this.effectiveDistOptions = await (new helperClass(this).computeEffectiveDistOptions())\n\n    await this.sign(this.computeAppOutDir(outDir, arch))\n  }\n\n  packageInDistributableFormat(outDir: string, appOutDir: string, arch: Arch, targets: Array<Target>, promises: Array<Promise<any>>): void {\n    // skip\n  }\n\n  protected doSign(opts: SignOptions): Promise<any> {\n    this.signOptions = opts\n    return BluebirdPromise.resolve(null)\n  }\n}"
  ]
}
