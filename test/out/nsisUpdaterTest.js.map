{
  "version": 3,
  "file": "nsisUpdaterTest.js",
  "sourceRoot": "",
  "sources": [
    "../src/nsisUpdaterTest.ts"
  ],
  "names": [],
  "mappings": ";;;;AAAA,wBAAiB,AAAiB,AAClC,AAAC;AAAD,6BAA2B,AAAsB,AACjD,AAAC;AACD,MAAY,AAAI,eAAM,AAAM,AAG5B,AAAC;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAAkB,AAAC,AAAC;AAExC,AAAO,OAAC,AAAU;AACtB,AAAU,gBAAE;AACV,AAAM,eAAC,AAAO,AAChB;AAAC,AACF;AAJ0B;AAM3B,MAAM,AAAgB,mBAAG,AAAO,QAAC,AAAgE,AAAC,kEAAC,AAAW;AAE9G,QAAI,QAAC,AAAoC,sCAAS,AAAC,CAAR;AACzC,UAAM,AAAO,UAAgB,IAAI,AAAgB,AAAE;AAEnD,AAAO,YAAC,AAAU;AAChB,AAAI,cAAE,AAAW;AACjB,AAAO,iBAAE,AAAa,AACvB,AAAC;AAHiB;AAKnB,AAAC,MAAC,AAAM,OAAC,AAAO,QAAC,AAAe,AAAE,mBAAE,AAAuC,AAAC,AAC9E;AAAC,AAAC;AAEF,QAAI,QAAC,AAAuC,yCAAS,AAAC,CAAR;AAC5C,UAAM,AAAO,UAAgB,IAAI,AAAgB,AAAE;AAEnD,AAAO,YAAC,AAAU;AAChB,AAAI,cAAE,AAAW;AACjB,AAAO,iBAAE,AAAwB,AAClC,AAAC;AAHiB;AAKnB,AAAC,MAAC,AAAM,OAAC,AAAO,QAAC,AAAe,AAAE,mBAAE,AAAgD,AAAC,AACvF;AAAC,AAAC;AAEF,QAAI,QAAC,AAAU,YAAE;AACf,UAAM,AAAO,UAAgB,IAAI,AAAgB,AAAE;AAEnD,AAAO,YAAC,AAAU;AAChB,AAAI,cAAE,AAAW;AACjB,AAAO,iBAAE,AAAS,AACnB,AAAC;AAHiB;AAKnB,UAAM,AAAiB,oBAAG,MAAM,AAAO,QAAC,AAAe,AAAE;AACzD,iBAAU,WAAC,AAAiB,kBAAC,AAAQ,AAAC,UAAC,AAAa;AAClD,AAAG,aAAE,AAAkE,AACxE,AAAC;AAFmD;AAGrD,iBAAU,WAAC,AAAI,KAAC,AAAI,MAAC,MAAM,AAAiB,kBAAC,AAAe,AAAC,AAAC,mBAAC,AAAM,AAAE,AACzE;AAAC,AAAC",
  "sourcesContent": [
    "import test from \"./helpers/avaEx\"\nimport { assertThat } from \"./helpers/fileAssert\"\nimport { NsisUpdater } from \"out/nsis-auto-updater/src/nsis-updater\"\nimport * as path from \"path\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"out/util/awaiter\");\n\n(<any>global).__test_app = {\n  getVersion: function () {\n    return \"0.0.1\"\n  }\n}\n\nconst NsisUpdaterClass = require(\"../../nsis-auto-updater/out/nsis-auto-updater/src/nsis-updater\").NsisUpdater\n\ntest(\"check updates - no versions at all\", async (t) => {\n  const updater: NsisUpdater = new NsisUpdaterClass()\n  //noinspection ReservedWordAsName\n  updater.setFeedURL({\n    user: \"actperepo\",\n    package: \"no-versions\",\n  })\n\n  t.throws(updater.checkForUpdates(), /No latest version, please ensure that/)\n})\n\ntest(\"cannot find suitable file for version\", async (t) => {\n  const updater: NsisUpdater = new NsisUpdaterClass()\n  //noinspection ReservedWordAsName\n  updater.setFeedURL({\n    user: \"actperepo\",\n    package: \"incorrect-file-version\",\n  })\n\n  t.throws(updater.checkForUpdates(), /Cannot find suitable file for version 1.0.0 in/)\n})\n\ntest(\"file url\", async () => {\n  const updater: NsisUpdater = new NsisUpdaterClass()\n  //noinspection ReservedWordAsName\n  updater.setFeedURL({\n    user: \"actperepo\",\n    package: \"TestApp\",\n  })\n\n  const updateCheckResult = await updater.checkForUpdates()\n  assertThat(updateCheckResult.fileInfo).hasProperties({\n    url: \"https://dl.bintray.com/actperepo/generic/TestApp Setup 1.1.0.exe\"\n  })\n  assertThat(path.join(await updateCheckResult.downloadPromise)).isFile()\n})"
  ]
}
