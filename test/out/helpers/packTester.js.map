{
  "version": 3,
  "file": "packTester.js",
  "sourceRoot": "",
  "sources": [
    "../../src/helpers/packTester.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { copy, emptyDir, remove, writeJson, readJson, readFile } from \"fs-extra-p\"\nimport { assertThat } from \"./fileAssert\"\nimport * as path from \"path\"\nimport { parse as parsePlist } from \"plist\"\nimport { CSC_LINK } from \"./codeSignData\"\nimport { expectedLinuxContents, expectedWinContents } from \"./expectedContents\"\nimport { Packager, PackagerOptions, Platform, ArtifactCreated, Arch, DIR_TARGET } from \"out\"\nimport { exec } from \"out/util/util\"\nimport { log, warn } from \"out/util/log\"\nimport { createTargets } from \"out\"\nimport { getArchSuffix, Target } from \"out/platformPackager\"\nimport pathSorter = require(\"path-sort\")\nimport DecompressZip = require(\"decompress-zip\")\nimport { convertVersion } from \"out/targets/squirrelPack\"\nimport { spawnNpmProduction } from \"out/util/util\"\nimport { TEST_DIR } from \"./config\"\nimport { deepAssign } from \"out/util/deepAssign\"\nimport { AssertContext } from \"ava-tf\"\nimport { SquirrelWindowsOptions } from \"out/options/winOptions\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"out/util/awaiter\")\n\nif (process.env.TRAVIS !== \"true\") {\n  // we don't use CircleCI, so, we can safely set this env\n  process.env.CIRCLE_BUILD_NUM = 42\n}\n\nconst OUT_DIR_NAME = \"dist\"\n\ninterface AssertPackOptions {\n  readonly projectDirCreated?: (projectDir: string) => Promise<any>\n  readonly packed?: (context: PackedContext) => Promise<any>\n  readonly expectedContents?: Array<string>\n  readonly expectedArtifacts?: Array<string>\n\n  readonly expectedDepends?: string\n\n  readonly useTempDir?: boolean\n  readonly signed?: boolean\n\n  readonly npmInstallBefore?: boolean\n}\n\ninterface PackedContext {\n  readonly projectDir: string,\n  readonly outDir: string\n\n  readonly getResources: (platform: Platform) => string\n  readonly getContent: (platform: Platform) => string\n}\n\nlet tmpDirCounter = 0\n\nexport function appThrows(error: RegExp, packagerOptions: PackagerOptions, checkOptions: AssertPackOptions = {}) {\n  return (t: AssertContext) => t.throws(assertPack(\"test-app-one\", packagerOptions, checkOptions), error)\n}\n\nexport function app(packagerOptions: PackagerOptions, checkOptions: AssertPackOptions = {}) {\n  return () => assertPack(\"test-app-one\", packagerOptions, checkOptions)\n}\n\nexport async function assertPack(fixtureName: string, packagerOptions: PackagerOptions, checkOptions: AssertPackOptions = {}): Promise<void> {\n  if (checkOptions.signed) {\n    packagerOptions = signed(packagerOptions)\n  }\n\n  const projectDirCreated = checkOptions.projectDirCreated\n  const useTempDir = process.env.TEST_APP_TMP_DIR != null || (checkOptions.useTempDir !== false && (checkOptions.useTempDir || projectDirCreated != null || packagerOptions.devMetadata != null || checkOptions.npmInstallBefore))\n\n  let projectDir = path.join(__dirname, \"..\", \"..\", \"fixtures\", fixtureName)\n  // const isDoNotUseTempDir = platform === \"darwin\"\n  const customTmpDir = process.env.TEST_APP_TMP_DIR\n  let dirToDelete: string | null = null\n  if (useTempDir) {\n    // non-osx test uses the same dir as osx test, but we cannot share node_modules (because tests executed in parallel)\n    const dir = customTmpDir == null ? path.join(TEST_DIR, `${(tmpDirCounter++).toString(16)}`) : path.resolve(customTmpDir)\n    if (customTmpDir == null) {\n      dirToDelete = dir\n    }\n    else {\n      log(`Custom temp dir used: ${customTmpDir}`)\n    }\n    await emptyDir(dir)\n    await copy(projectDir, dir, {\n      filter: it => {\n        const basename = path.basename(it)\n        return basename !== OUT_DIR_NAME && basename !== \"node_modules\" && basename[0] !== \".\"\n      }\n    })\n    projectDir = dir\n  }\n\n  try {\n    if (projectDirCreated != null) {\n      await projectDirCreated(projectDir)\n      if (checkOptions.npmInstallBefore) {\n        await spawnNpmProduction(\"install\", projectDir, false)\n      }\n    }\n\n    // never output to test fixture app\n    if (!useTempDir) {\n      dirToDelete = path.join(TEST_DIR, `${(tmpDirCounter++).toString(16)}`)\n      const devMetadata = packagerOptions.devMetadata\n      if (devMetadata != null && devMetadata.directories != null) {\n        throw new Error(\"unsupported\")\n      }\n      packagerOptions = deepAssign({}, packagerOptions, {devMetadata: {directories: {output: dirToDelete}}})\n    }\n\n    const outDir = useTempDir ? path.join(projectDir, OUT_DIR_NAME) : dirToDelete\n    await packAndCheck(outDir, Object.assign({\n      projectDir: projectDir,\n    }, packagerOptions), checkOptions)\n\n    if (checkOptions.packed != null) {\n      function base(platform: Platform): string {\n        return path.join(outDir, `${platform.buildConfigurationKey}${platform === Platform.MAC ? \"\" : \"-unpacked\"}`)\n      }\n\n      await checkOptions.packed({\n          projectDir: projectDir,\n          outDir: outDir,\n          getResources: platform => path.join(base(platform), \"resources\"),\n          getContent: platform => base(platform),\n      })\n    }\n  }\n  finally {\n    if (dirToDelete != null) {\n      try {\n        await remove(dirToDelete)\n      }\n      catch (e) {\n        console.warn(`Cannot delete temporary directory ${dirToDelete}: ${(e.stack || e)}`)\n      }\n    }\n  }\n}\n\nexport function getTestAsset(file: string) {\n  return path.join(__dirname, \"..\", \"..\", \"fixtures\", file)\n}\n\nasync function packAndCheck(outDir: string, packagerOptions: PackagerOptions, checkOptions: AssertPackOptions): Promise<void> {\n  const packager = new Packager(packagerOptions)\n\n  const artifacts: Map<Platform, Array<ArtifactCreated>> = new Map()\n  packager.artifactCreated(event => {\n    assertThat(event.file).isAbsolute()\n    let list = artifacts.get(event.platform)\n    if (list == null) {\n      list = []\n      artifacts.set(event.platform, list)\n    }\n    list.push(event)\n  })\n\n  const platformToTarget = await packager.build()\n\n  if (packagerOptions.platformPackagerFactory != null || packagerOptions.effectiveOptionComputed != null) {\n    return\n  }\n\n  c: for (let [platform, archToType] of packagerOptions.targets) {\n    for (let [arch, targets] of archToType) {\n      if (targets.length === 1 && targets[0] === DIR_TARGET) {\n        continue c\n      }\n\n      const nameToTarget = platformToTarget.get(platform)\n      if (platform === Platform.MAC) {\n        await checkOsXResult(packager, packagerOptions, checkOptions, artifacts.get(Platform.MAC))\n      }\n      else if (platform === Platform.LINUX) {\n        await checkLinuxResult(outDir, packager, checkOptions, artifacts.get(Platform.LINUX), arch, nameToTarget)\n      }\n      else if (platform === Platform.WINDOWS) {\n        await checkWindowsResult(packager, checkOptions, artifacts.get(Platform.WINDOWS), arch, nameToTarget)\n      }\n    }\n  }\n}\n\nasync function checkLinuxResult(outDir: string, packager: Packager, checkOptions: AssertPackOptions, artifacts: Array<ArtifactCreated>, arch: Arch, nameToTarget: Map<String, Target>) {\n  const appInfo = packager.appInfo\n\n  function getExpected(): Array<string> {\n    const result: Array<string> = []\n    for (let target of nameToTarget.keys()) {\n      if (target === \"appimage\") {\n        result.push(`${appInfo.name}-${appInfo.version}-${arch === Arch.x64 ? \"x86_64\" : Arch[arch]}.AppImage`)\n      }\n      else if (target === \"deb\") {\n        result.push(`${appInfo.name}-${appInfo.version}-${arch === Arch.x64 ? \"amd64\" : Arch[arch]}.deb`)\n      }\n      else {\n        result.push(`TestApp-${appInfo.version}.${target}`)\n      }\n    }\n    return result\n  }\n\n  assertThat(getFileNames(artifacts)).containsAll(getExpected())\n\n  if (!nameToTarget.has(\"deb\")) {\n    return\n  }\n\n  const productFilename = appInfo.productFilename\n  const expectedContents = pathSorter(expectedLinuxContents.map(it => {\n    if (it === \"/opt/TestApp/TestApp\") {\n      return `/opt/${productFilename}/${productFilename}`\n    }\n    else if (it === \"/usr/share/applications/TestApp.desktop\") {\n      return `/usr/share/applications/${productFilename}.desktop`\n    }\n    else {\n      return it.replace(new RegExp(\"/opt/TestApp/\", \"g\"), `/opt/${productFilename}/`)\n    }\n  }))\n\n  const packageFile = `${outDir}/TestApp-${appInfo.version}-${arch === Arch.ia32 ? \"ia32\" : (arch === Arch.x64 ? \"amd64\" : \"armv7l\")}.deb`\n  assertThat(await getContents(packageFile)).isEqualTo(expectedContents)\n  if (arch === Arch.ia32) {\n    assertThat(await getContents(`${outDir}/TestApp-${appInfo.version}-i386.deb`)).isEqualTo(expectedContents)\n  }\n\n  assertThat(parseDebControl(await exec(\"dpkg\", [\"--info\", packageFile]))).hasProperties({\n    License: \"MIT\",\n    Homepage: \"http://foo.example.com\",\n    Maintainer: \"Foo Bar <foo@example.com>\",\n    Vendor: \"Foo Bar <foo@example.com>\",\n    Package: \"testapp\",\n    Description: \" \\n   Test Application (test quite “ #378)\",\n    Depends: checkOptions == null || checkOptions.expectedDepends == null ? \"libappindicator1, libnotify-bin\" : checkOptions.expectedDepends,\n    Section: \"devel\",\n  })\n}\n\nfunction parseDebControl(info: string): any {\n  const regexp = /([\\w]+): *(.+\\n)([^:\\n]+\\n)?/g\n  let match: Array<string>\n  const metadata: any = {}\n  info = info.substring(info.indexOf(\"Package:\"))\n  while ((match = regexp.exec(info)) !== null) {\n    let value = match[2]\n    if (match[3] != null) {\n      value += match[3]\n    }\n\n    if (value[value.length - 1] === \"\\n\") {\n      value = value.substring(0, value.length - 1)\n    }\n    metadata[match[1]] = value\n  }\n  return metadata\n}\n\nasync function checkOsXResult(packager: Packager, packagerOptions: PackagerOptions, checkOptions: AssertPackOptions, artifacts: Array<ArtifactCreated>) {\n  const appInfo = packager.appInfo\n  const packedAppDir = path.join(path.dirname(artifacts[0].file), `${appInfo.productFilename}.app`)\n  const info = parsePlist(await readFile(path.join(packedAppDir, \"Contents\", \"Info.plist\"), \"utf8\"))\n  assertThat(info).hasProperties({\n    CFBundleDisplayName: appInfo.productName,\n    CFBundleIdentifier: \"org.electron-builder.testApp\",\n    LSApplicationCategoryType: \"your.app.category.type\",\n    CFBundleVersion: `${appInfo.version}.${(process.env.TRAVIS_BUILD_NUMBER || process.env.CIRCLE_BUILD_NUM)}`\n  })\n\n  if (packagerOptions.cscLink != null) {\n    const result = await exec(\"codesign\", [\"--verify\", packedAppDir])\n    assertThat(result).doesNotMatch(/is not signed at all/)\n  }\n\n  const actualFiles = artifacts.map(it => path.basename(it.file)).sort()\n  if (checkOptions != null && checkOptions.expectedContents != null) {\n    assertThat(actualFiles).isEqualTo(checkOptions.expectedContents)\n  }\n  else {\n    assertThat(actualFiles).isEqualTo([\n      `${appInfo.productFilename}-${appInfo.version}-mac.zip`,\n      `${appInfo.productFilename}-${appInfo.version}.dmg`,\n    ].sort())\n\n    assertThat(artifacts.map(it => it.artifactName).sort()).isEqualTo([\n      `TestApp-${appInfo.version}-mac.zip`,\n      `TestApp-${appInfo.version}.dmg`,\n    ].sort())\n  }\n}\n\nfunction getFileNames(list: Array<ArtifactCreated>): Array<string> {\n  return list.map(it => path.basename(it.file))\n}\n\nasync function checkWindowsResult(packager: Packager, checkOptions: AssertPackOptions, artifacts: Array<ArtifactCreated>, arch: Arch, nameToTarget: Map<String, Target>) {\n  const appInfo = packager.appInfo\n  let squirrel = false\n\n  const artifactNames: Array<string> = []\n  const expectedFileNames: Array<string> = []\n  const archSuffix = getArchSuffix(arch)\n  const buildOptions = packager.devMetadata.build.win\n  for (let target of nameToTarget.keys()) {\n    if (target === \"squirrel\") {\n      squirrel = true\n      expectedFileNames.push(\"RELEASES\", `${appInfo.productFilename} Setup ${appInfo.version}${archSuffix}.exe`, `${appInfo.name}-${convertVersion(appInfo.version)}-full.nupkg`)\n\n      if (buildOptions != null && (<SquirrelWindowsOptions>buildOptions).remoteReleases != null) {\n        expectedFileNames.push(`${appInfo.name}-${convertVersion(appInfo.version)}-delta.nupkg`)\n      }\n\n      artifactNames.push(`${appInfo.name}-Setup-${appInfo.version}${archSuffix}.exe`)\n    }\n    else if (target === \"nsis\") {\n      expectedFileNames.push(`${appInfo.productFilename} Setup ${appInfo.version}.exe`)\n      artifactNames.push(`${appInfo.name}-Setup-${appInfo.version}.exe`)\n    }\n    else {\n      expectedFileNames.push(`${appInfo.productFilename}-${appInfo.version}${archSuffix}-win.${target}`)\n      artifactNames.push(`${appInfo.name}-${appInfo.version}${archSuffix}-win.${target}`)\n    }\n  }\n\n  assertThat(getFileNames(artifacts)).containsAll(expectedFileNames)\n\n  if (!squirrel) {\n    return\n  }\n\n  assertThat(artifacts.map(it => it.artifactName).filter(it => it != null)).containsAll(artifactNames)\n\n  const packageFile = artifacts.find(it => it.file.endsWith(\"-full.nupkg\"))!.file\n  const unZipper = new DecompressZip(packageFile)\n  const fileDescriptors = await unZipper.getFiles()\n\n  const files = pathSorter(fileDescriptors.map(it => it.path.replace(/\\\\/g, \"/\")).filter(it => (!it.startsWith(\"lib/net45/locales/\") || it === \"lib/net45/locales/en-US.pak\") && !it.endsWith(\".psmdcp\")))\n\n  // console.log(JSON.stringify(files, null, 2))\n  const expectedContents = checkOptions == null || checkOptions.expectedContents == null ? expectedWinContents : checkOptions.expectedContents\n  assertThat(files).isEqualTo(pathSorter(expectedContents.map(it => {\n    if (it === \"lib/net45/TestApp.exe\") {\n      if (appInfo.productFilename === \"Test App ßW\") {\n        return `lib/net45/Test%20App%20%C3%9FW.exe`\n      }\n      return `lib/net45/${encodeURI(appInfo.productFilename).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\")}.exe`\n    }\n    else {\n      return it\n    }\n  })))\n\n  if (checkOptions == null || checkOptions.expectedContents == null) {\n    await unZipper.extractFile(fileDescriptors.filter(it => it.path === \"TestApp.nuspec\")[0], {\n      path: path.dirname(packageFile),\n    })\n    const expectedSpec = (await readFile(path.join(path.dirname(packageFile), \"TestApp.nuspec\"), \"utf8\")).replace(/\\r\\n/g, \"\\n\")\n    // console.log(expectedSpec)\n    assertThat(expectedSpec).isEqualTo(`<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\n  <metadata>\n    <id>TestApp</id>\n    <version>${convertVersion(appInfo.version)}</version>\n    <title>${appInfo.productName}</title>\n    <authors>Foo Bar</authors>\n    <owners>Foo Bar</owners>\n    <iconUrl>https://raw.githubusercontent.com/szwacz/electron-boilerplate/master/resources/windows/icon.ico</iconUrl>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <description>Test Application (test quite “ #378)</description>\n    <copyright>Copyright © ${new Date().getFullYear()} Foo Bar</copyright>\n    <projectUrl>http://foo.example.com</projectUrl>\n  </metadata>\n</package>`)\n  }\n}\n\nasync function getContents(path: string) {\n  const result = await exec(\"dpkg\", [\"--contents\", path])\n  return pathSorter(result\n    .split(\"\\n\")\n    .map(it => it.length === 0 ? null : it.substring(it.indexOf(\".\") + 1))\n    .filter(it => it != null && !(it.includes(`/locales/`) || it.includes(`/libgcrypt`)))\n    )\n}\n\nexport function packageJson(task: (data: any) => void, isApp: boolean = false) {\n  return (projectDir: string) => modifyPackageJson(projectDir, task, isApp)\n}\n\nexport async function modifyPackageJson(projectDir: string, task: (data: any) => void, isApp: boolean = false): Promise<any> {\n  const file = isApp ? path.join(projectDir, \"app\", \"package.json\") : path.join(projectDir, \"package.json\")\n  const data = await readJson(file)\n  task(data)\n  return await writeJson(file, data)\n}\n\nexport function platform(platform: Platform): PackagerOptions {\n  return {\n    targets: platform.createTarget()\n  }\n}\n\nexport function signed(packagerOptions: PackagerOptions): PackagerOptions {\n  if (process.env.CSC_KEY_PASSWORD == null) {\n    warn(\"macOS code sign is not tested — CSC_KEY_PASSWORD is not defined\")\n  }\n  else {\n    packagerOptions.cscLink = CSC_LINK\n  }\n  return packagerOptions\n}\n\nexport function getPossiblePlatforms(type?: string): Map<Platform, Map<Arch, string[]>> {\n  const platforms = [Platform.fromString(process.platform)]\n  if (process.platform === Platform.MAC.nodeName) {\n    if (process.env.LINUX_SKIP == null) {\n      platforms.push(Platform.LINUX)\n    }\n    if (process.env.CI == null) {\n      platforms.push(Platform.WINDOWS)\n    }\n  }\n  else if (process.platform === Platform.LINUX.nodeName && process.env.SKIP_WIN == null) {\n    platforms.push(Platform.WINDOWS)\n  }\n  return createTargets(platforms, type)\n}\n\nexport function currentPlatform(dist: boolean = true): PackagerOptions {\n  return {\n    targets: Platform.fromString(process.platform).createTarget(dist ? null : DIR_TARGET),\n  }\n}\n"
  ]
}
