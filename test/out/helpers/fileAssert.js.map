{
  "version": 3,
  "file": "fileAssert.js",
  "sourceRoot": "",
  "sources": [
    "../../src/helpers/fileAssert.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { stat } from \"fs-extra-p\"\nimport * as json8 from \"json8\"\nimport { green, red, gray } from \"chalk\"\nimport { diffJson } from \"diff\"\nimport { AssertionError } from \"assert\"\nimport * as path from \"path\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"out/util/awaiter\")\n\n// http://joel-costigliola.github.io/assertj/\nexport function assertThat(actual: any): Assertions {\n  return new Assertions(actual)\n}\n\n//noinspection JSUnusedLocalSymbols\nfunction jsonReplacer(key: any, value: any): any {\n  if (value instanceof Map) {\n    return [...value]\n  }\n  return value === undefined ? undefined : value\n}\n\nclass Assertions {\n  constructor (private actual: any) {\n  }\n\n  isEqualTo(expected: any) {\n    compare(this.actual, expected)\n  }\n\n  isNotEqualTo(expected: any) {\n    compare(this.actual, expected, true)\n  }\n\n  isNotEmpty() {\n    compare(this.actual, \"\", true)\n  }\n\n  isNotNull() {\n    compare(this.actual, null, true)\n  }\n\n  doesNotMatch(pattern: RegExp) {\n    if ((<string>this.actual).match(pattern)) {\n      throw new Error(`${this.actual} matches ${pattern}`)\n    }\n  }\n\n  containsAll<T>(expected: Iterable<T>) {\n    compare(this.actual.slice().sort(), Array.from(expected).slice().sort())\n  }\n\n  hasProperties<T>(expected: any) {\n    const actual = Object.create(null)\n    for (let name of Object.getOwnPropertyNames(this.actual)) {\n      if (name in expected) {\n        actual[name] = this.actual[name]\n      }\n    }\n    compare(actual, expected)\n  }\n\n  isAbsolute() {\n    if (!path.isAbsolute(this.actual)) {\n      throw new Error(`Path ${this.actual} is not absolute`)\n    }\n  }\n\n  async isFile() {\n    const info = await stat(this.actual)\n    if (!info.isFile()) {\n      throw new Error(`Path ${this.actual} is not a file`)\n    }\n  }\n\n  async isDirectory() {\n    const info = await stat(this.actual)\n    if (!info.isDirectory()) {\n      throw new Error(`Path ${this.actual} is not a directory`)\n    }\n  }\n\n  async doesNotExist() {\n    try {\n      await stat(this.actual)\n    }\n    catch (e) {\n      return\n    }\n\n    throw new Error(`Path ${this.actual} must not exist`)\n  }\n}\n\nexport function prettyDiff(actual: any, expected: any): string {\n  const diffJson2 = diffJson(expected, actual)\n  const diff = diffJson2.map(part => {\n    if (part.added) {\n      return green(part.value.replace(/.+/g, \"    - $&\"))\n    }\n    if (part.removed) {\n      return red(part.value.replace(/.+/g, \"    + $&\"))\n    }\n    return gray(part.value.replace(/.+/g, \"    | $&\"))\n  }).join(\"\")\n  return `\\n${diff}\\n`\n}\n\nfunction compare(actual: any, expected: any, not: boolean = false) {\n  if (json8.equal(actual, expected) === not) {\n    const actualJson = JSON.stringify(actual, jsonReplacer, 2)\n    const expectedJson = JSON.stringify(expected, jsonReplacer, 2)\n    const stack = new Error().stack\n    throw new AssertionError({\n      message: `Expected \\n${expectedJson}\\n\\nis not equal to\\n\\n${actualJson}\\n\\n${prettyDiff(JSON.parse(expectedJson), JSON.parse(actualJson))}\\n${stack.split(\"\\n\")[3].trim()}`,\n      actual: actual,\n      expected: expected,\n    })\n  }\n}"
  ]
}
