{
  "version": 3,
  "file": "runTests.js",
  "sourceRoot": "",
  "sources": [
    "../../src/helpers/runTests.ts"
  ],
  "names": [],
  "mappings": ";;;;AAAA,gCAAsB,AAAe,AACrC,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,6BAA4F,AAAY,AACxG,AAAC;AACD,qBAAsC,AAAI,AAC1C,AAAC;AAAD,yBAA2C,AAAU,AAIrD,AAAC;AAAD,MAAM,AAAS,YAAG,AAAO,QAAC,AAA2B,AAAC;AAEtD,MAAM,AAAI,OAAG,AAAO,QAAC,AAAwB,AAAC;AAC9C,MAAM,AAAS,YAAG,AAAI,KAAC,AAAK;AAC5B,MAAM,AAAe,kBAAG,AAAI,KAAC,AAAe;AAE5C,MAAM,AAAgB,mBAAmC,WAAe,QAAC,AAAS,UAAC,AAAO,QAAC,AAAmB,AAAC,AAAC;AAChH,MAAM,AAAQ,WAAG,AAAO,QAAC,AAAuB,AAAC;AAEjD,MAAM,AAAO,UAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAI,MAAE,AAAI,MAAE,AAAI,AAAC;AACtD,MAAM,AAAc,iBAAG,AAAI,KAAC,AAAI,KAAC,KAAM,AAAE,UAAE,AAA4B,AAAC;AACxE,MAAM,AAAe,kBAAG,AAAI,KAAC,AAAI,KAAC,AAAc,gBAAE,AAAc,AAAC;AAEjE;;AACE,cAAM,WAAe,QAAC,AAAG,IAAC,CACxB,AAAwB,AAAE,4BAC1B,AAAmC,AAAE,uCACrC,aAAQ,SAAC,SAAQ,AAAC,wBACR,WAAC,AAAI,KAAC,AAAI,KAAC,AAAc,gBAAE,AAAc,AAAC,AAAE;;;;;qCAKtB,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAS,UAAC,AAAO,QAAC,AAAK,OAAE,AAAG,AAAC,MAAE,AAAI,MAAE,AAAI,AAAC,KAExF,AAAC;;MAPH,EAQG,AAAI,KAAC,MAAM,AAAgB,AAAE,AAAC,AAClC,AAAC;AAIF,cAAM,AAAI,KAAC,CAAC,AAAS,WAAE,AAAa,eAAE,AAAW,aAAE,AAAc,gBAAE,AAAO,AAAC,AAAC;AAE5E,cAAM,AAAI,KAAC,CAAC,AAAO,SAAE,AAAc,AAAC,AAAC;AACrC,YAAI,AAAC;AACH,kBAAM,AAAQ,AAAE,AAClB;AAAC,kBACO,AAAC;AACP,kBAAM,aAAM,OAAC,SAAQ,AAAC,AACxB;AAAC,AACH;AAAC;AAAA;AAED,AAAI,AAAE,OACH,AAAK,MAAC,AAAK;AACV,AAAO,YAAC,AAAK,MAAC,AAAK,MAAC,AAAK,SAAI,AAAK,AAAC;AACnC,AAAO,YAAC,AAAI,KAAC,AAAC,AAAC,AACjB;AAAC,AAAC;AAEJ;;AACE,AAAE,AAAC,YAAC,CAAC,AAAO,QAAC,AAAG,IAAC,AAAE,AAAC,IAAC,AAAC;AACpB,AAAM,AACR;AAAC;AAED,cAAM,AAAQ,WAAG,AAAI,KAAC,AAAI,KAAC,KAAO,AAAE,WAAE,AAAW,AAAC;AAClD,YAAI,AAAC;AACH,kBAAM,AAAc,iBAAwB,AAAE;AAC9C,AAAG,AAAC,iBAAC,IAAI,AAAI,AAAI,QAAC,MAAM,aAAO,QAAC,AAAQ,AAAC,AAAC,AAAC,WAAC,AAAC;AAC3C,AAAE,AAAC,oBAAC,AAAI,KAAC,AAAQ,SAAC,AAAM,AAAC,WAAI,EAAC,AAAI,KAAC,AAAQ,QAAC,SAAgB,AAAC,AAAC,2BAAC,AAAC;AAC9D,AAAO,4BAAC,AAAG,AAAC,4BAAuB,AAAI,IAAE,AAAC;AAC1C,AAAc,mCAAC,AAAI,KAAC,aAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAQ,UAAE,AAAI,AAAC,AAAC,AAAC,AACxD;AAAC,AACH;AAAC;AACD,AAAM,mBAAC,MAAM,WAAe,QAAC,AAAG,IAAC,AAAc,AAAC,AAClD;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,AAAM,uBAAC,AAAE,AACX;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAC,AACT;AAAC,AACH;AAAC,AACH;AAAC;AAAA;AAED;AACE,UAAM,AAAgB,mBAAwB,AAAE;AAEhD,UAAM,AAAS,YAAG,AAAQ,SAAC,AAAkB,mBAAC,CAAC,AAAK,AAAC,AAAC,QAAC,AAAG,IAAE,AAAY,EAAb,IAAkB,AAAE,GAAC,AAAQ,AAAC;AACzF,AAAE,AAAC,QAAC,AAAO,QAAC,AAAQ,aAAK,AAAQ,AAAC,UAAC,AAAC;AAClC,AAAS,kBAAC,AAAI,KAAC,AAAK,AAAC,AACvB;AAAC;AAED,AAAG,AAAC,SAAC,IAAI,AAAQ,YAAI,AAAS,AAAC,WAAC,AAAC;AAC/B,cAAM,AAAK,QAAI,AAAQ,aAAK,AAAK,SAAI,AAAQ,aAAK,AAAQ,AAAC,QAA7C,GAAgD,CAAC,AAAK,AAAC,AAAG,SAAC,AAAQ,aAAK,AAAO,UAAG,CAAC,AAAM,QAAE,AAAK,AAAC,SAAG,CAAC,AAAM,QAAE,AAAK,OAAE,AAAQ,AAAC,AAAC;AAC5I,AAAG,AAAC,aAAC,IAAI,AAAI,QAAI,AAAK,AAAC,OAAC,AAAC;AACvB,AAAgB,6BAAC,AAAI;AACnB,AAAO,yBAAE,SAAgB;AACzB,AAAI,sBAAE,AAAI;AACV,AAAQ,0BAAE,AAAQ,AACnB,AAAC,AAAC,AACL;AALyC,aAAjB,AAAgB;AAKvC,AACH;AAAC;AACD,AAAM,WAAC,WAAe,QAAC,AAAG,IAAC,AAAgB,AAAC,AAC9C;AAAC;AAGD;;AACE,cAAM,aAAQ,SAAC,AAAe,AAAC;AAC/B,cAAM,AAAO,UAAG,AAAM,OAAC,AAAI,KAAC,CAAC,MAAM,aAAQ,SAAC,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAc,AAAC,iBAAE,AAAO,AAAC,AAAC,UAAC,AAAe,AAAC;AAC1G,cAAM,AAAQ,WAAG,IAAI,AAAG,AAAE;AAE1B,AAAG,AAAC,aAAC,IAAI,AAAI,QAAI,AAAO,AAAC,SAAC,AAAC;AACzB,AAAQ,qBAAC,AAAG,IAAC,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAc,gBAAE,AAAI,AAAC,AAAC,AACxD;AAAC;AAED,AAAQ,iBAAC,AAAG,IAAC,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAc,gBAAE,AAAM,AAAC,AAAC;AAExD,AAAM,4BAAK,KAAC,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAc,AAAC,iBAAE,AAAe;AAC7D,AAAM,oBAAE,AAAE;AACR,AAAE,AAAC,oBAAC,AAAE,GAAC,AAAQ,QAAC,AAAc,iBAAG,AAAI,KAAC,AAAG,MAAG,AAAQ,AAAC,AAAC,kBAAC,AAAC;AACtD,AAAM,2BAAC,AAAK,AACd;AAAC;AACD,AAAM,uBAAC,CAAC,AAAQ,SAAC,AAAG,IAAC,AAAE,AAAC,AAC1B;AAAC,AACF,AAAC,AACJ;AARmE,SAA1D;AAQR;AAAA;AAKD;AACE,UAAM,AAAI,OAAkB,AAAE;AAC9B,UAAM,AAAS,YAAG,AAAO,QAAC,AAAG,IAAC,AAAU;AAExC,AAAI,SAAC,AAAI,AAAC,uBAAiB,KAAI,AAAE,OAAC,AAAM,MAAE,AAAC;AAE3C,UAAM,AAAO,UAAG,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,AAAK,AAAC;AACxC,UAAM,AAAiB,oBAAG,CAAC,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAA0B,AAAC,6BAAE,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAoB,AAAC,uBAAE,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAiB,AAAC,AAAC;AAC3J,QAAI,AAAO,UAAG,AAAK;AACnB,AAAE,AAAC,QAAC,CAAC,AAAe,gBAAC,AAAS,AAAC,AAAC,YAAC,AAAC;AAChC,AAAI,aAAC,AAAI,AAAC,oCAAG,AAAS,UAAC,AAAK,MAAC,AAAG,AAAC,KAAC,AAAG,IAAE,AAAU,EAAX,IAAgB,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAE,GAAC,AAAI,AAAE,SAAG,AAAK,AAAC,AAAC,AAAC;AAC7F,AAAE,AAAC,YAAC,AAAO,QAAC,AAAQ,aAAK,AAAO,AAAC,SAAC,AAAC;AAEjC,AAAI,iBAAC,AAAI,AAAC,iBAAG,AAAiB,AAAC,AACjC;AAAC;AAED,AAAO,gBAAC,AAAG,AAAC,oBAAe,AAAI,KAAC,AAAI,KAAC,AAAI,AAAC,KAAE,AAAC,AAC/C;AAAC,AACD,AAAI,eAAK,CAAC,AAAe,gBAAC,AAAO,QAAC,AAAG,IAAC,AAAiB,AAAC,AAAC,oBAAC,AAAC;AACzD,cAAM,AAAe,kBAAG,AAAQ,SAAC,AAAO,QAAC,AAAG,IAAC,AAAiB,mBAAE,AAAE,AAAC;AACnE,AAAE,AAAC,YAAC,AAAe,oBAAK,AAAC,KAAI,AAAe,oBAAK,AAAC,AAAC,GAAC,AAAC;AACnD,AAAO,sBAAG,AAAI;AACd,AAAI,iBAAC,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAsB,AAAC,yBAAE,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAc,AAAC,iBAAE,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAa,AAAC,AAAC,AAC9H;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAI,iBAAC,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAoB,AAAC,uBAAE,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAa,AAAC,gBAAE,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAoB,AAAC,AAAC;AAChI,AAAI,iBAAC,AAAI,AAAC,iBAAG,AAAiB,AAAC,AACjC;AAAC;AACD,AAAO,gBAAC,AAAG,AAAC,4BAAuB,AAAe,sBAAK,AAAI,KAAC,AAAI,KAAC,AAAI,AAAC,KAAE,AAAC,AAC3E;AAAC,AACD,AAAI,KAZC,AAAE,AAAC,UAYC,AAAO,QAAC,AAAQ,aAAK,AAAO,AAAC,SAAC,AAAC;AACtC,AAAI,aAAC,AAAI,KAAC,AAAe,iBAAE,AAA8B,gCAAE,AAAgC,kCAAE,AAA2B,6BAAE,AAAoC,sCAAE,AAA8B,AAAC,AACjM;AAAC,AACD,AAAI,KAHC,AAAE,AAAC,MAGH,AAAE,AAAC,IAAC,CAAC,AAAI,KAAC,AAAI,AAAE,AAAC,QAAC,AAAC;AACtB,AAAI,aAAC,AAAI,KAAC,AAAe,iBAAE,AAAoC,sCAAE,AAA8B,AAAC,AAClG;AAAC;AAED,AAAM,qBAAW,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAc,gBAAE,AAAM,QAAE,AAAK,AAAC,QAAE,AAAI;AACtE,AAAG,aAAE,AAAO;AACZ,AAAG,oBAAS,AAAM,OAAC,AAAE,IAAE,AAAO,QAAC,AAAG;AAChC,AAAS,uBAAE,AAAI,KAAC,AAAI,KAAC,AAAe,iBAAE,AAAkB,AAAC;AACzD,AAAQ,sBAAE,AAAO;AACjB,AAA2B,yCAAE,AAAO,AACrC,AAAC;AAJkC,SAA/B,AAAM;AAKX,AAAK,eAAE,AAAO,QAAC,AAAQ,aAAK,AAAO;AACnC,AAAK,eAAE,AAAS,AACjB,AAAC,AACJ;AAV4E,KAAnE,AAAS;AAUjB;AAED,cAAc,AAAmB;AAC/B,AAAM,eAAK,WAAe,QAAC,CAAC,AAAO,SAAE,AAAM;AACzC,YAAI,AAAO,UAAG,AAAK;AACnB,cAAM,AAAW,cAAG,AAAO,QAAC,AAAG,IAAC,AAAY,gBAAI,AAAO,QAAC,AAAG,IAAC,AAAU;AACtE,AAAE,AAAC,YAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,iBAAC,AAAO,QAAC,AAAW,AAAC;AACzB,AAAO,sBAAG,AAAO,QAAC,AAAG,IAAC,AAAiB,qBAAI,AAAO,QAAC,AAAG,IAAC,AAAQ,YAAI,AAAM,AAC3E;AAAC;AAED,cAAM,AAAgB;AACpB,AAAK,mBAAE,CAAC,AAAQ,UAAE,AAAQ,UAAE,AAAS,AAAC;AACtC,AAAG,iBAAE,AAAc,AACpB;AAHwB;AAKzB,cAAM,AAAK,QAAG,gBAAK,MAAC,AAAO,SAAE,AAAI,MAAE,AAAgB,AAAC;AACpD,AAAK,cAAC,AAAE,GAAC,AAAO,SAAG,AAAY,IAAb;AAChB,AAAE,AAAC,gBAAC,AAAI,SAAK,AAAC,AAAC,GAAC,AAAC;AACf,AAAO,AAAE,AACX;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,oBAAI,AAAC;AACH,AAAO,4BAAC,AAAK,MAAC,aAAY,aAAC,AAAI,KAAC,AAAI,KAAC,AAAc,gBAAE,AAAe,AAAC,kBAAE,AAAM,AAAC,AAAC,AACjF;AACA,kBAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC,AAEX,CAAC;AACD,AAAM,uBAAC,IAAI,AAAK,AAAC,UAAG,AAAO,aAAI,AAAI,KAAC,AAAI,KAAC,AAAG,AAAC,2BAAqB,AAAI,IAAE,AAAC,AAAC,AAC5E;AAAC,AACH;AAAC,AAAC;AACF,AAAK,cAAC,AAAE,GAAC,AAAO,SAAG,AAAY,KAAb;AAChB,AAAM,mBAAC,IAAI,AAAK,yCAAmC,AAAO,aAAI,AAAI,KAAC,AAAI,KAAC,AAAG,AAAC,IAAE,AAAG,GAAhE,IAAiE,AAAK,MAAC,AAAK,SAAI,AAAK,AAAC,AAAC,AAAC,AAC3G;AAAC,AAAC,AACJ;AAAC,AAAC,AACJ,KAhCS;AAgCR",
  "sourcesContent": [
    "import { spawn } from \"child_process\"\nimport * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { copy, emptyDir, outputFile, readdir, readFileSync, readJson, unlink, remove } from \"fs-extra-p\"\nimport { Platform } from \"out/metadata\"\nimport { cpus, homedir, tmpdir } from \"os\"\nimport { TEST_DIR, ELECTRON_VERSION } from \"./config\"\n\n// we set NODE_PATH in this file, so, we cannot use 'out/awaiter' path here\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../../../out/util/awaiter\")\n\nconst util = require(\"../../../out/util/util\")\nconst utilSpawn = util.spawn\nconst isEmptyOrSpaces = util.isEmptyOrSpaces\n\nconst downloadElectron: (options: any) => Promise<any> = BluebirdPromise.promisify(require(\"electron-download\"))\nconst packager = require(\"../../../out/packager\")\n\nconst rootDir = path.join(__dirname, \"..\", \"..\", \"..\")\nconst testPackageDir = path.join(tmpdir(), \"electron_builder_published\")\nconst testNodeModules = path.join(testPackageDir, \"node_modules\")\n\nasync function main() {\n  await BluebirdPromise.all([\n    deleteOldElectronVersion(),\n    downloadAllRequiredElectronVersions(),\n    emptyDir(TEST_DIR),\n    outputFile(path.join(testPackageDir, \"package.json\"), `{\n      \"private\": true,\n      \"version\": \"1.0.0\",\n      \"name\": \"test\",\n      \"dependencies\": {\n        \"electron-builder\": \"file:${path.posix.join(__dirname.replace(/\\\\/g, \"/\"), \"..\", \"..\")}\"\n      }\n    }`)\n      .then(() => copyDependencies())\n  ])\n\n  // install from cache - all dependencies are already installed before run test\n  // https://github.com/npm/npm/issues/2568\n  await exec([\"install\", \"--cache-min\", \"999999999\", \"--production\", rootDir])\n  // prune stale packages\n  await exec([\"prune\", \"--production\"])\n  try {\n    await runTests()\n  }\n  finally {\n    await remove(TEST_DIR)\n  }\n}\n\nmain()\n  .catch(error => {\n    console.error(error.stack || error)\n    process.exit(1)\n  })\n\nasync function deleteOldElectronVersion(): Promise<any> {\n  if (!process.env.CI) {\n    return\n  }\n\n  const cacheDir = path.join(homedir(), \".electron\")\n  try {\n    const deletePromises: Array<Promise<any>> = []\n    for (let file of (await readdir(cacheDir))) {\n      if (file.endsWith(\".zip\") && !file.includes(ELECTRON_VERSION)) {\n        console.log(`Remove old electron ${file}`)\n        deletePromises.push(unlink(path.join(cacheDir, file)))\n      }\n    }\n    return await BluebirdPromise.all(deletePromises)\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\") {\n      return []\n    }\n    else {\n      throw e\n    }\n  }\n}\n\nfunction downloadAllRequiredElectronVersions(): Promise<any> {\n  const downloadPromises: Array<Promise<any>> = []\n\n  const platforms = packager.normalizePlatforms([\"all\"]).map((it: Platform) => it.nodeName)\n  if (process.platform === \"darwin\") {\n    platforms.push(\"mas\")\n  }\n\n  for (let platform of platforms) {\n    const archs = (platform === \"mas\" || platform === \"darwin\") ? [\"x64\"] : (platform === \"win32\" ? [\"ia32\", \"x64\"] : [\"ia32\", \"x64\", \"armv7l\"])\n    for (let arch of archs) {\n      downloadPromises.push(downloadElectron({\n        version: ELECTRON_VERSION,\n        arch: arch,\n        platform: platform,\n      }))\n    }\n  }\n  return BluebirdPromise.all(downloadPromises)\n}\n\n// npm is very slow and not reliable - so, just copy and then prune dev dependencies\nasync function copyDependencies() {\n  await emptyDir(testNodeModules)\n  const devDeps = Object.keys((await readJson(path.join(rootDir, \"package.json\"), \"utf-8\")).devDependencies)\n  const filtered = new Set()\n  /*eslint prefer-const: 0*/\n  for (let name of devDeps) {\n    filtered.add(path.join(rootDir, \"node_modules\", name))\n  }\n\n  filtered.add(path.join(rootDir, \"node_modules\", \".bin\"))\n\n  return copy(path.join(rootDir, \"node_modules\"), testNodeModules, {\n    filter: it => {\n      if (it.includes(\"node_modules\" + path.sep + \"babel-\")) {\n        return false\n      }\n      return !filtered.has(it)\n    }\n  })\n}\n\n/**\n * CIRCLE_NODE_INDEX=2 — test nodejs 4 (on Circle).\n */\nfunction runTests(): BluebirdPromise<any> {\n  const args: Array<string> = []\n  const testFiles = process.env.TEST_FILES\n\n  args.push(`--concurrency=${cpus().length}`)\n\n  const baseDir = path.join(\"test\", \"out\")\n  const baseForLinuxTests = [path.join(baseDir, \"ArtifactPublisherTest.js\"), path.join(baseDir, \"httpRequestTest.js\"), path.join(baseDir, \"RepoSlugTest.js\")]\n  let skipWin = false\n  if (!isEmptyOrSpaces(testFiles)) {\n    args.push(...testFiles.split(\",\").map((it: string) => path.join(baseDir, it.trim() + \".js\")))\n    if (process.platform === \"linux\") {\n      // test it only on Linux in any case\n      args.push(...baseForLinuxTests)\n    }\n\n    console.log(`Test files: ${args.join(\", \")}`)\n  }\n  else if (!isEmptyOrSpaces(process.env.CIRCLE_NODE_INDEX)) {\n    const circleNodeIndex = parseInt(process.env.CIRCLE_NODE_INDEX, 10)\n    if (circleNodeIndex === 0 || circleNodeIndex === 2) {\n      skipWin = true\n      args.push(path.join(baseDir, \"linuxPackagerTest.js\"), path.join(baseDir, \"BuildTest.js\"), path.join(baseDir, \"globTest.js\"))\n    }\n    else {\n      args.push(path.join(baseDir, \"winPackagerTest.js\"), path.join(baseDir, \"nsisTest.js\"), path.join(baseDir, \"macPackagerTest.js\"))\n      args.push(...baseForLinuxTests)\n    }\n    console.log(`Test files for node ${circleNodeIndex}: ${args.join(\", \")}`)\n  }\n  else if (process.platform === \"win32\") {\n    args.push(\"test/out/*.js\", \"!test/out/macPackagerTest.js\", \"!test/out/linuxPackagerTest.js\", \"!test/out/CodeSignTest.js\", \"!test/out/ArtifactPublisherTest.js\", \"!test/out/httpRequestTest.js\")\n  }\n  else if (!util.isCi()) {\n    args.push(\"test/out/*.js\", \"!test/out/ArtifactPublisherTest.js\", \"!test/out/httpRequestTest.js\")\n  }\n\n  return utilSpawn(path.join(rootDir, \"node_modules\", \".bin\", \"ava\"), args, {\n    cwd: rootDir,\n    env: Object.assign({}, process.env, {\n      NODE_PATH: path.join(testNodeModules, \"electron-builder\"),\n      SKIP_WIN: skipWin,\n      CSC_IDENTITY_AUTO_DISCOVERY: \"false\",\n    }),\n    shell: process.platform === \"win32\",\n    stdio: \"inherit\"\n  })\n}\n\nfunction exec(args: Array<string>) {\n  return new BluebirdPromise((resolve, reject) => {\n    let command = \"npm\"\n    const npmExecPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n    if (npmExecPath != null) {\n      args.unshift(npmExecPath)\n      command = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n    }\n\n    const effectiveOptions = {\n      stdio: [\"ignore\", \"ignore\", \"inherit\"],\n      cwd: testPackageDir,\n    }\n    // console.log(`Execute ${command} ${args.join(\" \")} (cwd: ${effectiveOptions.cwd})`)\n    const child = spawn(command, args, effectiveOptions)\n    child.on(\"close\", (code: number) => {\n      if (code === 0) {\n        resolve()\n      }\n      else {\n        try {\n          console.error(readFileSync(path.join(testPackageDir, \"npm-debug.log\"), \"utf8\"))\n        }\n        catch (e) {\n          // ignore\n        }\n        reject(new Error(`${command} ${args.join(\" \")} exited with code ${code}`))\n      }\n    })\n    child.on(\"error\", (error: Error) => {\n      reject(new Error(`Failed to start child process: ${command} ${args.join(\" \")}` + (error.stack || error)))\n    })\n  })\n}"
  ]
}
